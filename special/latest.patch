diff --git a/.gitignore b/.gitignore
index 16b273a..e6fb8ec 100644
--- a/.gitignore
+++ b/.gitignore
@@ -12,6 +12,7 @@ autom4te.cache/
 build/
 configure
 docs/manual/html/
+docs/manual/texinfo/
 docs/manual/udis86.info
 libtool
 libudis86/itab.c
@@ -34,7 +35,10 @@ tests/*.bin
 tests/*.out
 tests/libcheck
 tests/difftest.sh
-scripts/ud_asmtest*
+scripts/ud_*asmtest*
+
+# Ignore distcheck outut
+udis86-1.*
 
 # Ignore C++ Builder history folders
 libudis86/__history/
diff --git a/BuildVS2010/README.txt b/BuildVS2010/README.txt
new file mode 100644
index 0000000..209d554
--- /dev/null
+++ b/BuildVS2010/README.txt
@@ -0,0 +1,8 @@
+Build notes for Windows:
+- If you don't have python installed at C:\Python27, edit build.proj accordingly
+- Execute buildVS2010.bat
+   - If you got VS2012, this will fail. 
+   - Edit/Copy the build script, so that it finds vcvars32.bat (just needed to replace 10.0 with 11.0).
+   - Open the solution and update the toolset.
+   - Compile with the build script and ignore an error regarding ./Win32 not deletable.
+- Be done with it :)
\ No newline at end of file
diff --git a/Makefile.am b/Makefile.am
index 62a62f5..7ad647f 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -3,21 +3,21 @@ ACLOCAL_AMFLAGS = -I build/m4
 SUBDIRS = scripts libudis86 udcli docs tests
 
 MAINTAINERCLEANFILES = \
-    Makefile.in \
-    configure \
+	Makefile.in \
+	configure \
 	config.h.in \
 	config.h.in~ \
-    missing \
-    aclocal.m4 \
-    build/config.guess \
-    build/config.sub \
-    build/compile \
-    build/config.guess \
-    build/config.sub \
-    build/depcomp \
-    build/install-sh \
-    build/ltmain.sh \
-    build/missing
+	missing \
+	aclocal.m4 \
+	build/config.guess \
+	build/config.sub \
+	build/compile \
+	build/config.guess \
+	build/config.sub \
+	build/depcomp \
+	build/install-sh \
+	build/ltmain.sh \
+	build/missing
 
 include_ladir = ${includedir}
 include_la_HEADERS = udis86.h
diff --git a/configure.ac b/configure.ac
index 9cdadf2..d62db16 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,7 +1,7 @@
 #
 # udis86 autoconf
 #
-AC_PREREQ(2.59)
+AC_PREREQ(2.60)
 AC_INIT([udis86], [1.7.2], [vivek.mt@gmail.com])
 AC_CONFIG_HEADERS(config.h)
 AC_CONFIG_AUX_DIR(build)
@@ -32,6 +32,7 @@ esac
 
 # Initialize the automake subsystem.
 AM_INIT_AUTOMAKE([1.11 -Wall -Wno-portability -Wno-extra-portability -Werror foreign])
+AM_SILENT_RULES([yes])
 
 #
 # In case we have a Windows build, we pass a 
@@ -40,9 +41,8 @@ AM_INIT_AUTOMAKE([1.11 -Wall -Wno-portability -Wno-extra-portability -Werror for
 AM_CONDITIONAL(TARGET_WINDOWS, test "$TARGET_OS" = windows)
 
 AC_PROG_CC
-AC_DISABLE_SHARED
+AC_DISABLE_STATIC
 AC_PROG_LIBTOOL
-AC_ENABLE_SHARED
 AM_PROG_CC_C_O
 
 # If this is a gnu compiler, pass -Wall
@@ -53,7 +53,7 @@ fi
 # Look for python
 AX_WITH_PYTHON
 if test "x$PYTHON" = "x"; then
-    AC_MSG_ERROR( [Python not found. Use --with-python to specify path to python binary] )
+	AC_MSG_ERROR([Python not found. Use --with-python to specify path to python binary])
 fi
 
 # Yasm (>= 1.2.0)  for testing
@@ -69,15 +69,15 @@ AM_CONDITIONAL(HAVE_SPHINX_DOC, [test -n "$ac_have_sphinx_version"])
 AC_CHECK_HEADERS([assert.h stdio.h])
 
 AC_CONFIG_FILES([
-    Makefile
-    scripts/Makefile
-    libudis86/Makefile
-    udcli/Makefile
-    tests/Makefile
-    docs/Makefile
-    docs/manual/Makefile
-    docs/x86/Makefile
-    tests/difftest.sh
+	Makefile
+	scripts/Makefile
+	libudis86/Makefile
+	udcli/Makefile
+	tests/Makefile
+	docs/Makefile
+	docs/manual/Makefile
+	docs/x86/Makefile
+	tests/difftest.sh
 ])
 
 AC_OUTPUT
diff --git a/docs/manual/Makefile.am b/docs/manual/Makefile.am
index 595dbe1..7eee652 100644
--- a/docs/manual/Makefile.am
+++ b/docs/manual/Makefile.am
@@ -1,4 +1,4 @@
-docdir = ${datadir}/docs/udis86/manual
+manualdir = ${docdir}/manual
 
 rst_sources = \
 	index.rst \
@@ -16,8 +16,8 @@ EXTRA_DIST = \
 	static
 
 MAINTAINERCLEANFILES = \
-    Makefile.in \
-    udis86.info
+	Makefile.in \
+	udis86.info
 
 if HAVE_SPHINX_DOC
 
diff --git a/docs/manual/conf.py b/docs/manual/conf.py
index 2871b4c..654fed6 100644
--- a/docs/manual/conf.py
+++ b/docs/manual/conf.py
@@ -6,7 +6,7 @@
 project = u'udis86'
 copyright = u'2013, Vivek Thampi'
 version = '1.7'
-release = '1.7.1'
+release = '1.7.2'
 
 # List of patterns, relative to source directory, that match files and
 # directories to ignore when looking for source files.
diff --git a/docs/x86/Makefile.am b/docs/x86/Makefile.am
index 1044bf7..3c1fe6c 100644
--- a/docs/x86/Makefile.am
+++ b/docs/x86/Makefile.am
@@ -1,4 +1,4 @@
-docdir = ${datadir}/docs/udis86/x86
-dist_doc_DATA = optable.xml optable.xsl
+x86dir = ${docdir}/x86
+dist_x86_DATA = optable.xml optable.xsl
 
 MAINTAINERCLEANFILES = Makefile.in
diff --git a/docs/x86/avx.xml b/docs/x86/avx.xml
new file mode 100644
index 0000000..9b7b12c
--- /dev/null
+++ b/docs/x86/avx.xml
@@ -0,0 +1,3023 @@
+  <instruction>
+    <mnemonic>vaddpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 58</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vaddps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 58</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vaddsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 58</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vaddss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 58</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vandpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 54</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vandps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 54</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vandnpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 55</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vandnps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 55</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcmppd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f c2</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcmpps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f c2</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcmpsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f c2</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcmpss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f c2</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcomisd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f 2f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcomiss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.0f 2f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtdq2pd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f e6</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtdq2ps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 5b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtpd2dq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f e6</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtpd2pi</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 2d</opc>
+    <opr>P W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtpd2ps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 5a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtpi2ps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 2a</opc>
+    <opr>V Q</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtpi2pd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 2a</opc>
+    <opr>V Q</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtps2dq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 5b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtps2pi</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 2d</opc>
+    <opr>P W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtps2pd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 5a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtsd2si</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.f20f 2d</opc>
+    <opr>Gy W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtsd2ss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 5a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtsi2ss</mnemonic>
+    <pfx>aso</pfx>
+    <opc>vex.f30f 2a</opc>
+    <opr>V Ey</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtss2si</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.f30f 2d</opc>
+    <opr>Gy W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtss2sd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 5a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvttpd2pi</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 2c</opc>
+    <opr>P W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvttpd2dq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e6</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvttps2dq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 5b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvttps2pi</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 2c</opc>
+    <opr>P W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvttsd2si</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.f20f 2c</opc>
+    <opr>Gy W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvtsi2sd</mnemonic>
+    <pfx>aso</pfx>
+    <opc>vex.f20f 2a</opc>
+    <opr>V Ey</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vcvttss2si</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.f30f 2c</opc>
+    <opr>Gy W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vdivpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 5e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vdivps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 5e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vdivsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 5e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vdivss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 5e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmaskmovq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f7</opc>
+    <opr>V U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmaxpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 5f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmaxps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 5f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmaxsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 5f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmaxss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 5f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vminpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 5d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vminps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 5d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vminsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 5d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vminss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 5d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+</instruction>
+
+  <instruction>
+    <mnemonic>vmovapd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 28</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovapd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 29</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovaps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 28</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovaps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 29</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 6e</opc>
+    <opr>V Ey</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 6e</opc>
+    <opr>P Ey</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 7e</opc>
+    <opr>Ey V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 7e</opc>
+    <opr>Ey P</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovhpd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 16 /mod=!11</opc>
+    <opr>V M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovhpd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 17</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovhps</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 16 /mod=!11</opc>
+    <opr>V M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovhps</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 17</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovlhps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 16 /mod=11</opc>
+    <opr>V U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovlpd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 12 /mod=!11</opc>
+    <opr>V M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovlpd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 13</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovlps</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 12 /mod=!11</opc>
+    <opr>V M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovlps</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 13</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovhlps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 12 /mod=11</opc>
+    <opr>V U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovmskpd</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.660f 50</opc>
+    <opr>Gd U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovmskps</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.0f 50</opc>
+    <opr>Gd U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovntdq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f e7</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovnti</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.0f c3</opc>
+    <opr>M Gy</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovntpd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f 2b</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovntps</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 2b</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovntq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f e7</opc>
+    <opr>M V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 6f</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d6</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 7e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 7f</opc>
+    <opr>W V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 10</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 11</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 10</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 11</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovsx</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.0f be</opc>
+    <opr>Gv Eb</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovsx</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.0f bf</opc>
+    <opr>Gy Ew</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovupd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 10</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovupd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 11</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovups</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 10</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovups</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 11</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovzx</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.0f b6</opc>
+    <opr>Gv Eb</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovzx</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.0f b7</opc>
+    <opr>Gy Ew</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmulpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 59</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmulps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 59</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmulsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 59</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmulss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 59</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vorps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 56</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpacksswb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 63</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpacksswb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 63</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpackssdw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 6b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpackssdw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 6b</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpackuswb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 67</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpackuswb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 67</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f fc</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f fc</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f fd</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f fd</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f fe</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f fe</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f ec</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f ec</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f ed</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f ed</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddusb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f dc</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddusb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f dc</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddusw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f dd</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddusw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f dd</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpand</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f db</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpand</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f db</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpandn</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f df</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpandn</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f df</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpavgb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e0</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpavgb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e0</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpavgw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e3</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpavgw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e3</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 74</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 74</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 75</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 75</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 76</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 76</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 64</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 64</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 65</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 65</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 66</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 66</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpextrb</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.660f3a 14</opc>
+    <opr>MbRv V Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpextrd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 16 /o=16</opc>
+    <opr>Ed V Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpextrd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 16 /o=32</opc>
+    <opr>Ed V Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpextrq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 16 /o=64</opc>
+    <opr>Eq V Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpextrw</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.660f c5</opc>
+    <opr>Gd U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpextrw</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.0f c5</opc>
+    <opr>Gd N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpinsrb</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.660f3a 20</opc>
+    <opr>V MbRd Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpinsrw</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.0f c4</opc>
+    <opr>P MwRy Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpinsrw</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.660f c4</opc>
+    <opr>V MwRy Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpinsrd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 22 /o=16</opc>
+    <opr>V Ed Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpinsrd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 22 /o=32</opc>
+    <opr>V Ed Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpinsrq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 22 /o=64</opc>
+    <opr>V Eq Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaddwd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f5</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaddwd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f5</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f ee</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f ee</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxub</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f de</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxub</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f de</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f ea</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f ea</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminub</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f da</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminub</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f da</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovmskb</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.660f d7</opc>
+    <opr>Gd U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovmskb</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.0f d7</opc>
+    <opr>Gd N</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulhuw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e4</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulhuw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e4</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulhw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e5</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulhw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e5</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmullw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d5</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmullw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d5</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpop</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.0f a9</opc>
+    <opr>GS</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpop</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f a1</opc>
+    <opr>FS</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpor</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f eb</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpor</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f eb</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=0</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=1</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=2</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=3</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=4</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=5</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=6</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetch</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 0d /reg=7</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetchnta</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 18 /reg=0</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetcht0</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 18 /reg=1</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetcht1</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 18 /reg=2</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vprefetcht2</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.0f 18 /reg=3</opc>
+    <opr>M</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsadbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f6</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsadbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f6</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpshufw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 70</opc>
+    <opr>P Q Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f1</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f1</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 71 /reg=6</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 71 /reg=6</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpslld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f2</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpslld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f2</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpslld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 72 /reg=6</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpslld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 72 /reg=6</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f3</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f3</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 73 /reg=6</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsllq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 73 /reg=6</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsraw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e1</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsraw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e1</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsraw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 71 /reg=4</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsraw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 71 /reg=4</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrad</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 72 /reg=4</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrad</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e2</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrad</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e2</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrad</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 72 /reg=4</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 71 /reg=2</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d1</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d1</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 71 /reg=2</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 72 /reg=2</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d2</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d2</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 72 /reg=2</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 73 /reg=2</opc>
+    <opr>N Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d3</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d3</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrlq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 73 /reg=2</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f8</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f8</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f9</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f9</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f fa</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f fa</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e8</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e8</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f e9</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f e9</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubusb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d8</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubusb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d8</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubusw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d9</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubusw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d9</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 68</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 68</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhwd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 69</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhwd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 69</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhdq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 6a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhdq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 6a</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpcklbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 60</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpcklbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 60</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpcklwd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 61</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpcklwd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 61</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckldq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 62</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckldq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 62</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpush</mnemonic>
+    <pfx>vex.W vex.L</pfx>
+    <opc>vex.0f a8</opc>
+    <opr>GS</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpush</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f a0</opc>
+    <opr>FS</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpxor</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f ef</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpxor</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f ef</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vrcpps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 53</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vrcpss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 53</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vrsqrtps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 52</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vrsqrtss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 52</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+</instruction>
+
+  <instruction>
+    <mnemonic>vshufpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f c6</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vshufps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f c6</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsqrtps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 51</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsqrtpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 51</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsqrtsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 51</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsqrtss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 51</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsubpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 5c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsubps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 5c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsubsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f20f 5c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vsubss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.f30f 5c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vucomisd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f 2e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vucomiss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.0f 2e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vunpckhpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 15</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vunpckhps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 15</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vunpcklps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 14</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vunpcklpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 14</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vxorpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 57</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vxorps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f 57</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovdqa</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 7f</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovdqa</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 6f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovdq2q</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f d6</opc>
+    <opr>P U</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovdqu</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 6f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovdqu</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 7f</opc>
+    <opr>W H V</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovq2dq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f d6</opc>
+    <opr>V N</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f d4</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpaddq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d4</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f fb</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsubq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f fb</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmuludq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f f4</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmuludq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f f4</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpshufhw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 70</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpshuflw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f 70</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpshufd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 70</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpslldq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 73 /reg=7</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsrldq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 73 /reg=3</opc>
+    <opr>U Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpckhqdq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 6d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpunpcklqdq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 6c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vaddsubpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f d0</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vaddsubps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f d0</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vhaddpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 7c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vhaddps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f 7c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vhsubpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f 7d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vhsubps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f 7d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovddup</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f 12 /mod=11</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovddup</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f20f 12 /mod=!11</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovshdup</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 16 /mod=11</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovshdup</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 16 /mod=!11</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovsldup</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 12 /mod=11</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovsldup</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.f30f 12 /mod=!11</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpabsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 1c</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpabsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 1c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpabsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 1d</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpabsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 1d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpabsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.0f38 1e</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpabsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f38 1e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 00</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 00</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphaddw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 01</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphaddw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 01</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphaddd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 02</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphaddd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 02</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphaddsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 03</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphaddsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 03</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaddubsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 04</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaddubsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 04</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphsubw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 05</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphsubw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 05</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphsubd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 06</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphsubd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 06</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphsubsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 07</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphsubsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 07</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 08</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 08</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 0a</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 0a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 09</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpsignw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 09</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulhrsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f38 0b</opc>
+    <opr>V W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulhrsw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 0b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpalignr</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.0f3a 0f</opc>
+    <opr>P Q Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpalignr</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 0f</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpblendvb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 10</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmuldq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 28</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 38</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f38 39</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminuw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 3a</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpminud</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 3b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxsb</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 3c</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f38 3d</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxud</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 3f</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmaxuw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 3e</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmulld</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 40</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vphminposuw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 41</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vroundps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 08</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vroundpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 09</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vroundss</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f3a 0a</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vroundsd</mnemonic>
+    <pfx></pfx>
+    <opc>vex.660f3a 0b</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vblendpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 0d</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpblendw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 0e</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vblendps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 0c</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vblendvpd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 15</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vblendvps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 14</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vdpps</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 40</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vdppd</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 41</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmpsadbw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 42</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vextractps</mnemonic>
+    <pfx>aso vex.W vex.L</pfx>
+    <opc>vex.660f3a 17</opc>
+    <opr>MdRy V Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vinsertps</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f3a 21</opc>
+    <opr>V Md Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vmovntdqa</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 2a</opc>
+    <opr>V Mo</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpackusdw</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 2b</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovsxbw</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 20</opc>
+    <opr>V MqU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovsxbd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 21</opc>
+    <opr>V MdU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovsxbq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 22</opc>
+    <opr>V MwU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovsxwd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 23</opc>
+    <opr>V MqU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovsxwq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 24</opc>
+    <opr>V MdU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovsxdq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 25</opc>
+    <opr>V MqU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovzxbw</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 30</opc>
+    <opr>V MqU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovzxbd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 31</opc>
+    <opr>V MdU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovzxbq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 32</opc>
+    <opr>V MwU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovzxwd</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 33</opc>
+    <opr>V MqU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovzxwq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 34</opc>
+    <opr>V MdU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpmovzxdq</mnemonic>
+    <pfx>aso vex.L</pfx>
+    <opc>vex.660f38 35</opc>
+    <opr>V MqU</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpeqq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 29</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vptest</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 17</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpestri</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 61</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpestrm</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 60</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpgtq</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f38 37</opc>
+    <opr>V H W</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpistri</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 63</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
+
+  <instruction>
+    <mnemonic>vpcmpistrm</mnemonic>
+    <pfx>vex.L</pfx>
+    <opc>vex.660f3a 62</opc>
+    <opr>V W Ib</opr>
+    <cpuid>avx</cpuid>
+  </instruction>
diff --git a/docs/x86/optable.xml b/docs/x86/optable.xml
index 60b2ec1..3bda858 100644
--- a/docs/x86/optable.xml
+++ b/docs/x86/optable.xml
@@ -8,12 +8,29 @@
       CDATA element consisting of blank-separated words.  Upper and lower
       case are equivalent.
 
-      pfx describes the prefixes that can precede the main opcode without
-      turning it into a different instruction.  These may be:
-      aso - accepts address size override
-      oso - accepts operand size override
-      rexw, rexr, rexx, rexb - uses the indicated REX bit
-      seg - accepts a segment override
+      <pfx></pfx>
+
+      pfx describes the set of valid prefixes that can precede the main
+      opcode without turning it into a different instruction. These may
+      be:
+
+      aso   accepts address size override
+      oso   accepts operand size override
+      seg   accepts a segment override
+      rexw, rexr, rexx, rexb
+            uses the indicated REX bit
+      vexl  accepts the vex.L prefix bit, in other words, the vexl
+            bit can be used in the decoding of the avx instruction.
+
+      <opr></opr>
+
+      [T][s]
+
+      Size Suffix
+      ===========
+
+      x     - If vex.L = 1 => m256/YMM
+                 vex.L = 0 => m128/XMM
 
       opc words may be actual byte values (two hex digits), or may be one of
       the following:
@@ -40,6 +57,48 @@
       The mode element affects instruction semantics but not decoding:
           inv64 - invalid in 64-bit mode
       def64 - default operand size is 64 bits in 64-bit mode
+
+      cpuid
+
+        The cpuid element maybe applied to an instruction or a specific
+        definition of the instruction. One ore more strings define the
+        cpuid features that the instruction (or a definition belongs to)
+
+        Values are: sse, sse2, sse3, sse4, sse4.1, sse4.2, avx
+
+      AVX Instructions
+
+      AVX instructions can be described in two ways. One, the explicit
+      form, and the other that promotes an existing sse instruction
+      definition to its avx form.
+
+      If an instruction is defined to be in cpuid=avx, but is defined in
+      the legacy form (using /sse= extensions), then the opcode generator
+      will infer that as two definitions, one the see instruction and the
+      other, an inferred avx instruction.
+
+      In generating the sse definition from the above, the following
+      transformations happen,
+
+        - /vexw and /vexl extensions (if any) are removed
+        - The operands H and L are removed. Operands specified on
+          the right to removed operands are shifted to the left
+          position.
+        - The vexl prefix is removed.
+        - "avx" is removed form the cpuid definition.
+
+     In generating the avx definition from the above, the following
+     transformations happen,
+
+        - c4 is inserted in the 0th position of the opcode string
+        - /sse extension is removed
+        - A new /vex extension is constructed using /sse, 0f, 38 and
+          3a opcodes (if any).
+        - Operands V, W, H, and U are marked explicitly to have the
+          size suffix "x"
+
+     If the above transformations do not generate the required
+     definitions, the instructions will need to be defined separately.
   -->
 
     <instruction>
@@ -182,45 +241,126 @@
 
     <instruction>
         <mnemonic>addpd</mnemonic>
-        <class>sse2</class>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 58</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>addps</mnemonic>
-        <class>sse</class>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 58</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>addsd</mnemonic>
-        <class>sse2</class>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 58</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>addss</mnemonic>
-        <class>sse</class>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 58</opc>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>addsubpd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f d0</opc>
+            <opr>V H W</opr>
+            <cpuid>sse3 avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>addsubps</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=f2 0f d0</opc>
+            <opr>V H W</opr>
+            <cpuid>sse3 avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>aesdec</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 38 de</opc>
+            <opr>V H W</opr>
+            <cpuid>aesni avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>aesdeclast</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 38 df</opc>
             <opr>V W</opr>
+            <cpuid>aesni avx</cpuid>
         </def>
     </instruction>
 
-     <instruction>
+    <instruction>
+        <mnemonic>aesenc</mnemonic>
+        <cpuid>aesni</cpuid>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 38 dc</opc>
+            <opr>V W</opr>
+            <cpuid>aesni avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>aesenclast</mnemonic>
+        <cpuid>aesni avx</cpuid>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 38 dd</opc>
+            <opr>V H W</opr>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>aesimc</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 38 db</opc>
+            <opr>V W</opr>
+            <cpuid>aesni avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>aeskeygenassist</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 3a df</opc>
+            <opr>V W Ib</opr>
+            <cpuid>aesni avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
         <mnemonic>and</mnemonic>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -277,9 +417,10 @@
     <instruction>
         <mnemonic>andpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 54</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -288,7 +429,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 54</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -297,7 +439,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 55</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -306,7 +449,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 55</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -328,133 +472,6 @@
         </def>
     </instruction>
 
-    <instruction>
-        <mnemonic>bound</mnemonic>
-        <def>
-            <pfx>aso oso</pfx>
-            <opc>62 /m=!64</opc>
-            <opr>Gv M</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>bsf</mnemonic>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f bc</opc>
-            <opr>Gv Ev</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>bsr</mnemonic>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f bd</opc>
-            <opr>Gv Ev</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>bswap</mnemonic>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f c8</opc>
-            <opr>R0y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f c9</opc>
-            <opr>R1y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f ca</opc>
-            <opr>R2y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f cb</opc>
-            <opr>R3y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f cc</opc>
-            <opr>R4y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f cd</opc>
-            <opr>R5y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f ce</opc>
-            <opr>R6y</opr>
-        </def>
-        <def>
-            <pfx>oso rexw rexb</pfx>
-            <opc>0f cf</opc>
-            <opr>R7y</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>bt</mnemonic>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f ba /reg=4</opc>
-            <opr>Ev Ib</opr>
-        </def>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f a3</opc>
-            <opr>Ev Gv</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>btc</mnemonic>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f bb</opc>
-            <opr>Ev Gv</opr>
-        </def>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f ba /reg=7</opc>
-            <opr>Ev Ib</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>btr</mnemonic>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f b3</opc>
-            <opr>Ev Gv</opr>
-        </def>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f ba /reg=6</opc>
-            <opr>Ev Ib</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>bts</mnemonic>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f ab</opc>
-            <opr>Ev Gv</opr>
-        </def>
-        <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
-            <opc>0f ba /reg=5</opc>
-            <opr>Ev Ib</opr>
-        </def>
-    </instruction>
-
     <instruction>
         <mnemonic>call</mnemonic>
         <def>
@@ -763,18 +780,20 @@
     <instruction>
         <mnemonic>cmppd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f c2</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>cmpps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f c2</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -803,7 +822,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f c2</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -820,7 +840,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f c2</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -842,12 +863,12 @@
         <mnemonic>cmpxchg8b</mnemonic>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f c7 /reg=1 /o=16</opc>
+            <opc>0f c7 /mod=!11 /reg=1 /o=16</opc>
             <opr>M</opr>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f c7 /reg=1 /o=32</opc>
+            <opc>0f c7 /mod=!11 /reg=1 /o=32</opc>
             <opr>M</opr>
         </def>
     </instruction>
@@ -856,7 +877,7 @@
         <mnemonic>cmpxchg16b</mnemonic>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f c7 /reg=1 /o=64</opc>
+            <opc>0f c7 /mod=!11 /reg=1 /o=64</opc>
             <opr>M</opr>
         </def>
     </instruction>
@@ -866,7 +887,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 2f</opc>
-            <opr>V W</opr>
+            <opr>Vsd Wsd</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -876,6 +898,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 2f</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -889,9 +912,10 @@
     <instruction>
         <mnemonic>cvtdq2pd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f e6</opc>
-            <opr>V W</opr>
+            <opr>V Wdq</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -901,15 +925,17 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 5b</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>cvtpd2dq</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f2 0f e6</opc>
-            <opr>V W</opr>
+            <opr>Vdq W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -925,9 +951,10 @@
     <instruction>
         <mnemonic>cvtpd2ps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 5a</opc>
-            <opr>V W</opr>
+            <opr>Vdq W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -952,27 +979,29 @@
     <instruction>
         <mnemonic>cvtps2dq</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 5b</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>cvtps2pi</mnemonic>
+        <mnemonic>cvtps2pd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f 2d</opc>
-            <opr>P W</opr>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>0f 5a</opc>
+            <opr>V Wdq</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>cvtps2pd</mnemonic>
+        <mnemonic>cvtps2pi</mnemonic>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f 5a</opc>
-            <opr>V W</opr>
+            <opc>0f 2d</opc>
+            <opr>P MqU</opr>
         </def>
     </instruction>
 
@@ -981,7 +1010,8 @@
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 2d</opc>
-            <opr>Gy W</opr>
+            <opr>Gy MqU</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -990,25 +1020,28 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 5a</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>cvtsi2ss</mnemonic>
+        <mnemonic>cvtsi2sd</mnemonic>
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>/sse=f3 0f 2a</opc>
-            <opr>V Ey</opr>
+            <opc>/sse=f2 0f 2a</opc>
+            <opr>V H Ey</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>cvtss2si</mnemonic>
+        <mnemonic>cvtsi2ss</mnemonic>
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>/sse=f3 0f 2d</opc>
-            <opr>Gy W</opr>
+            <opc>/sse=f3 0f 2a</opc>
+            <opr>V H Ey</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -1017,34 +1050,47 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 5a</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>cvttpd2pi</mnemonic>
+        <mnemonic>cvtss2si</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 2c</opc>
-            <opr>P W</opr>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=f3 0f 2d</opc>
+            <opr>Gy MdU</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>cvttpd2dq</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f e6</opc>
-            <opr>V W</opr>
+            <opr>Vdq W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>cvttps2dq</mnemonic>
+        <mnemonic>cvttpd2pi</mnemonic>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 2c</opc>
+            <opr>P W</opr>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>cvttps2dq</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 5b</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -1062,16 +1108,8 @@
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 2c</opc>
-            <opr>Gy W</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>cvtsi2sd</mnemonic>
-        <def>
-            <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>/sse=f2 0f 2a</opc>
-            <opr>V Ey</opr>
+            <opr>Gy MqU</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -1080,7 +1118,8 @@
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 2c</opc>
-            <opr>Gy W</opr>
+            <opr>Gy MdU</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -1195,9 +1234,10 @@
     <instruction>
         <mnemonic>divpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 5e</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -1206,7 +1246,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 5e</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -1215,7 +1256,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 5e</opc>
-            <opr>V W</opr>
+            <opr>V H MqU</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -1224,7 +1266,28 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 5e</opc>
-            <opr>V W</opr>
+            <opr>V H MdU</opr>
+            <cpuid>sse avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>dppd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 3a 41</opc>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>dpps</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=66 0f 3a 40</opc>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -1244,9 +1307,19 @@
         </def>
     </instruction>
 
+    <instruction>
+        <mnemonic>extractps</mnemonic>
+        <def>
+            <pfx>aso rexr rexw rexx rexb</pfx>
+            <opc>/sse=66 0f 3a 17</opc>
+            <opr>MdRy V Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
+        </def>
+    </instruction>
+
     <instruction>
         <mnemonic>f2xm1</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=30</opc>
         </def>
@@ -1254,7 +1327,7 @@
 
     <instruction>
         <mnemonic>fabs</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=21</opc>
         </def>
@@ -1262,7 +1335,7 @@
 
     <instruction>
         <mnemonic>fadd</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dc /mod=!11 /reg=0</opc>
@@ -1341,7 +1414,7 @@
 
     <instruction>
         <mnemonic>faddp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=00</opc>
             <opr>ST0 ST0</opr>
@@ -1378,7 +1451,7 @@
 
     <instruction>
         <mnemonic>fbld</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>df /mod=!11 /reg=4</opc>
@@ -1388,7 +1461,7 @@
 
     <instruction>
         <mnemonic>fbstp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>df /mod=!11 /reg=6</opc>
@@ -1398,7 +1471,7 @@
 
     <instruction>
         <mnemonic>fchs</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=20</opc>
         </def>
@@ -1406,7 +1479,7 @@
 
     <instruction>
         <mnemonic>fclex</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=22</opc>
         </def>
@@ -1414,7 +1487,7 @@
 
     <instruction>
         <mnemonic>fcmovb</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>da /mod=11 /x87=00</opc>
             <opr>ST0 ST0</opr>
@@ -1451,7 +1524,7 @@
 
     <instruction>
         <mnemonic>fcmove</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>da /mod=11 /x87=08</opc>
             <opr>ST0 ST0</opr>
@@ -1488,7 +1561,7 @@
 
     <instruction>
         <mnemonic>fcmovbe</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>da /mod=11 /x87=10</opc>
             <opr>ST0 ST0</opr>
@@ -1525,7 +1598,7 @@
 
     <instruction>
         <mnemonic>fcmovu</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>da /mod=11 /x87=18</opc>
             <opr>ST0 ST0</opr>
@@ -1562,7 +1635,7 @@
 
     <instruction>
         <mnemonic>fcmovnb</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=00</opc>
             <opr>ST0 ST0</opr>
@@ -1599,7 +1672,7 @@
 
     <instruction>
         <mnemonic>fcmovne</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=08</opc>
             <opr>ST0 ST0</opr>
@@ -1636,7 +1709,7 @@
 
     <instruction>
         <mnemonic>fcmovnbe</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=10</opc>
             <opr>ST0 ST0</opr>
@@ -1673,7 +1746,7 @@
 
     <instruction>
         <mnemonic>fcmovnu</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=18</opc>
             <opr>ST0 ST0</opr>
@@ -1710,7 +1783,7 @@
 
     <instruction>
         <mnemonic>fucomi</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=28</opc>
             <opr>ST0 ST0</opr>
@@ -1747,7 +1820,7 @@
 
     <instruction>
         <mnemonic>fcom</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d8 /mod=!11 /reg=2</opc>
@@ -1794,7 +1867,7 @@
 
     <instruction>
         <mnemonic>fcom2</mnemonic>
-        <class>X87 UNDOC</class>
+        <cpuid>X87 UNDOC</cpuid>
         <def>
             <opc>dc /mod=11 /x87=10</opc>
             <opr>ST0</opr>
@@ -1831,7 +1904,7 @@
 
     <instruction>
         <mnemonic>fcomp3</mnemonic>
-        <class>X87 UNDOC</class>
+        <cpuid>X87 UNDOC</cpuid>
         <def>
             <opc>dc /mod=11 /x87=18</opc>
             <opr>ST0</opr>
@@ -1868,7 +1941,7 @@
 
     <instruction>
         <mnemonic>fcomi</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=30</opc>
             <opr>ST0 ST0</opr>
@@ -1905,7 +1978,7 @@
 
     <instruction>
         <mnemonic>fucomip</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>df /mod=11 /x87=28</opc>
             <opr>ST0 ST0</opr>
@@ -1942,7 +2015,7 @@
 
     <instruction>
         <mnemonic>fcomip</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>df /mod=11 /x87=30</opc>
             <opr>ST0 ST0</opr>
@@ -1979,7 +2052,7 @@
 
     <instruction>
         <mnemonic>fcomp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d8 /mod=!11 /reg=3</opc>
@@ -2026,7 +2099,7 @@
 
     <instruction>
         <mnemonic>fcomp5</mnemonic>
-        <class>X87 UNDOC</class>
+        <cpuid>X87 UNDOC</cpuid>
         <def>
             <opc>de /mod=11 /x87=10</opc>
             <opr>ST0</opr>
@@ -2063,7 +2136,7 @@
 
     <instruction>
         <mnemonic>fcompp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=19</opc>
         </def>
@@ -2071,7 +2144,7 @@
 
     <instruction>
         <mnemonic>fcos</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=3f</opc>
         </def>
@@ -2079,7 +2152,7 @@
 
     <instruction>
         <mnemonic>fdecstp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=36</opc>
         </def>
@@ -2087,7 +2160,7 @@
 
     <instruction>
         <mnemonic>fdiv</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dc /mod=!11 /reg=6</opc>
@@ -2166,7 +2239,7 @@
 
     <instruction>
         <mnemonic>fdivp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=38</opc>
             <opr>ST0 ST0</opr>
@@ -2203,7 +2276,7 @@
 
     <instruction>
         <mnemonic>fdivr</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dc /mod=!11 /reg=7</opc>
@@ -2282,7 +2355,7 @@
 
     <instruction>
         <mnemonic>fdivrp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=30</opc>
             <opr>ST0 ST0</opr>
@@ -2326,7 +2399,7 @@
 
     <instruction>
         <mnemonic>ffree</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>dd /mod=11 /x87=00</opc>
             <opr>ST0</opr>
@@ -2363,7 +2436,7 @@
 
     <instruction>
         <mnemonic>ffreep</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>df /mod=11 /x87=00</opc>
             <opr>ST0</opr>
@@ -2400,7 +2473,7 @@
 
     <instruction>
         <mnemonic>ficom</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>de /mod=!11 /reg=2</opc>
@@ -2415,7 +2488,7 @@
 
     <instruction>
         <mnemonic>ficomp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>de /mod=!11 /reg=3</opc>
@@ -2430,7 +2503,7 @@
 
     <instruction>
         <mnemonic>fild</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>df /mod=!11 /reg=0</opc>
@@ -2450,7 +2523,7 @@
 
     <instruction>
         <mnemonic>fincstp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=37</opc>
         </def>
@@ -2458,7 +2531,7 @@
 
     <instruction>
         <mnemonic>fninit</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>db /mod=11 /x87=23</opc>
         </def>
@@ -2466,7 +2539,7 @@
 
     <instruction>
         <mnemonic>fiadd</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>da /mod=!11 /reg=0</opc>
@@ -2481,7 +2554,7 @@
 
     <instruction>
         <mnemonic>fidivr</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>da /mod=!11 /reg=7</opc>
@@ -2496,7 +2569,7 @@
 
     <instruction>
         <mnemonic>fidiv</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>da /mod=!11 /reg=6</opc>
@@ -2511,7 +2584,7 @@
 
     <instruction>
         <mnemonic>fisub</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>da /mod=!11 /reg=4</opc>
@@ -2526,7 +2599,7 @@
 
     <instruction>
         <mnemonic>fisubr</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>da /mod=!11 /reg=5</opc>
@@ -2541,7 +2614,7 @@
 
     <instruction>
         <mnemonic>fist</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>df /mod=!11 /reg=2</opc>
@@ -2556,7 +2629,7 @@
 
     <instruction>
         <mnemonic>fistp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>df /mod=!11 /reg=3</opc>
@@ -2576,7 +2649,7 @@
 
     <instruction>
         <mnemonic>fisttp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>db /mod=!11 /reg=1</opc>
@@ -2596,7 +2669,7 @@
 
     <instruction>
         <mnemonic>fld</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>db /mod=!11 /reg=5</opc>
@@ -2648,7 +2721,7 @@
 
     <instruction>
         <mnemonic>fld1</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=28</opc>
         </def>
@@ -2656,7 +2729,7 @@
 
     <instruction>
         <mnemonic>fldl2t</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=29</opc>
         </def>
@@ -2664,7 +2737,7 @@
 
     <instruction>
         <mnemonic>fldl2e</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=2a</opc>
         </def>
@@ -2672,7 +2745,7 @@
 
     <instruction>
         <mnemonic>fldpi</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=2b</opc>
         </def>
@@ -2680,7 +2753,7 @@
 
     <instruction>
         <mnemonic>fldlg2</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=2c</opc>
         </def>
@@ -2688,7 +2761,7 @@
 
     <instruction>
         <mnemonic>fldln2</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=2d</opc>
         </def>
@@ -2696,7 +2769,7 @@
 
     <instruction>
         <mnemonic>fldz</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=2e</opc>
         </def>
@@ -2704,7 +2777,7 @@
 
     <instruction>
         <mnemonic>fldcw</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d9 /mod=!11 /reg=5</opc>
@@ -2714,7 +2787,7 @@
 
     <instruction>
         <mnemonic>fldenv</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d9 /mod=!11 /reg=4</opc>
@@ -2724,7 +2797,7 @@
 
     <instruction>
         <mnemonic>fmul</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dc /mod=!11 /reg=1</opc>
@@ -2803,7 +2876,7 @@
 
     <instruction>
         <mnemonic>fmulp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=08</opc>
             <opr>ST0 ST0</opr>
@@ -2840,7 +2913,7 @@
 
     <instruction>
         <mnemonic>fimul</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>da /mod=!11 /reg=1</opc>
@@ -2855,15 +2928,39 @@
 
     <instruction>
         <mnemonic>fnop</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=10</opc>
         </def>
     </instruction>
+	
+    <instruction>
+        <mnemonic>fndisi</mnemonic>
+        <cpuid>X87</cpuid>
+        <def>
+            <opc>db /mod=11 /x87=21</opc>
+        </def>
+    </instruction>
+	
+    <instruction>
+        <mnemonic>fneni</mnemonic>
+        <cpuid>X87</cpuid>
+        <def>
+            <opc>db /mod=11 /x87=20</opc>
+        </def>
+    </instruction>
+	
+    <instruction>
+        <mnemonic>fnsetpm</mnemonic>
+        <cpuid>X87</cpuid>
+        <def>
+            <opc>db /mod=11 /x87=24</opc>
+        </def>
+    </instruction>
 
     <instruction>
         <mnemonic>fpatan</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=33</opc>
         </def>
@@ -2871,7 +2968,7 @@
 
     <instruction>
         <mnemonic>fprem</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=38</opc>
         </def>
@@ -2879,7 +2976,7 @@
 
     <instruction>
         <mnemonic>fprem1</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=35</opc>
         </def>
@@ -2887,7 +2984,7 @@
 
     <instruction>
         <mnemonic>fptan</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=32</opc>
         </def>
@@ -2895,7 +2992,7 @@
 
     <instruction>
         <mnemonic>frndint</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=3c</opc>
         </def>
@@ -2903,17 +3000,25 @@
 
     <instruction>
         <mnemonic>frstor</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dd /mod=!11 /reg=4</opc>
             <opr>M</opr>
         </def>
     </instruction>
+	
+    <instruction>
+        <mnemonic>frstpm</mnemonic>
+        <cpuid>X87</cpuid>
+        <def>
+            <opc>db /mod=11 /x87=25</opc>
+        </def>
+    </instruction>
 
     <instruction>
         <mnemonic>fnsave</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dd /mod=!11 /reg=6</opc>
@@ -2923,7 +3028,7 @@
 
     <instruction>
         <mnemonic>fscale</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=3d</opc>
         </def>
@@ -2931,7 +3036,7 @@
 
     <instruction>
         <mnemonic>fsin</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=3e</opc>
         </def>
@@ -2939,7 +3044,7 @@
 
     <instruction>
         <mnemonic>fsincos</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=3b</opc>
         </def>
@@ -2947,7 +3052,7 @@
 
     <instruction>
         <mnemonic>fsqrt</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=3a</opc>
         </def>
@@ -2955,7 +3060,7 @@
 
     <instruction>
         <mnemonic>fstp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>db /mod=!11 /reg=7</opc>
@@ -3115,7 +3220,7 @@
 
     <instruction>
         <mnemonic>fst</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d9 /mod=!11 /reg=2</opc>
@@ -3162,7 +3267,7 @@
 
     <instruction>
         <mnemonic>fnstcw</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d9 /mod=!11 /reg=7</opc>
@@ -3172,7 +3277,7 @@
 
     <instruction>
         <mnemonic>fnstenv</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d9 /mod=!11 /reg=6</opc>
@@ -3182,7 +3287,7 @@
 
     <instruction>
         <mnemonic>fnstsw</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dd /mod=!11 /reg=7</opc>
@@ -3196,7 +3301,7 @@
 
     <instruction>
         <mnemonic>fsub</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>d8 /mod=!11 /reg=4</opc>
@@ -3275,7 +3380,7 @@
 
     <instruction>
         <mnemonic>fsubp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=28</opc>
             <opr>ST0 ST0</opr>
@@ -3312,7 +3417,7 @@
 
     <instruction>
         <mnemonic>fsubr</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>dc /mod=!11 /reg=5</opc>
@@ -3391,7 +3496,7 @@
 
     <instruction>
         <mnemonic>fsubrp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>de /mod=11 /x87=20</opc>
             <opr>ST0 ST0</opr>
@@ -3428,7 +3533,7 @@
 
     <instruction>
         <mnemonic>ftst</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=24</opc>
         </def>
@@ -3436,7 +3541,7 @@
 
     <instruction>
         <mnemonic>fucom</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>dd /mod=11 /x87=20</opc>
             <opr>ST0</opr>
@@ -3473,7 +3578,7 @@
 
     <instruction>
         <mnemonic>fucomp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>dd /mod=11 /x87=28</opc>
             <opr>ST0</opr>
@@ -3510,7 +3615,7 @@
 
     <instruction>
         <mnemonic>fucompp</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>da /mod=11 /x87=29</opc>
         </def>
@@ -3518,7 +3623,7 @@
 
     <instruction>
         <mnemonic>fxam</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=25</opc>
         </def>
@@ -3526,7 +3631,7 @@
 
     <instruction>
         <mnemonic>fxch</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=08</opc>
             <opr>ST0 ST0</opr>
@@ -3563,7 +3668,7 @@
 
     <instruction>
         <mnemonic>fxch4</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>dd /mod=11 /x87=08</opc>
             <opr>ST0</opr>
@@ -3600,7 +3705,7 @@
 
     <instruction>
         <mnemonic>fxch7</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>df /mod=11 /x87=08</opc>
             <opr>ST0</opr>
@@ -3655,7 +3760,7 @@
 
     <instruction>
         <mnemonic>fxtract</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=34</opc>
         </def>
@@ -3663,7 +3768,7 @@
 
     <instruction>
         <mnemonic>fyl2x</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=31</opc>
         </def>
@@ -3671,7 +3776,7 @@
 
     <instruction>
         <mnemonic>fyl2xp1</mnemonic>
-        <class>X87</class>
+        <cpuid>X87</cpuid>
         <def>
             <opc>d9 /mod=11 /x87=39</opc>
         </def>
@@ -4229,15 +4334,6 @@
         </def>
     </instruction>
 
-    <instruction>
-        <mnemonic>lddqu</mnemonic>
-        <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=f2 0f f0</opc>
-            <opr>V M</opr>
-        </def>
-    </instruction>
-
     <instruction>
         <mnemonic>ldmxcsr</mnemonic>
         <def>
@@ -4251,7 +4347,7 @@
         <mnemonic>lds</mnemonic>
         <def>
             <pfx>aso oso</pfx>
-            <opc>c5 /m=!64</opc>
+            <opc>c5 /vex=none /m=!64</opc>
             <opr>Gv M</opr>
         </def>
     </instruction>
@@ -4470,18 +4566,20 @@
     <instruction>
         <mnemonic>maxpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 5f</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>maxps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 5f</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -4490,7 +4588,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 5f</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4499,7 +4598,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 5f</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -4534,9 +4634,10 @@
     <instruction>
         <mnemonic>minpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 5d</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4545,7 +4646,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 5d</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4554,7 +4656,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 5d</opc>
-            <opr>V W</opr>
+            <opr>V H MqU</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4563,7 +4666,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 5d</opc>
-            <opr>V W</opr>
+            <opr>V H MdU</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -4746,28 +4850,32 @@
     <instruction>
         <mnemonic>movapd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 28</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 29</opc>
             <opr>W V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movaps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 28</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 29</opc>
             <opr>W V</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -4775,23 +4883,52 @@
         <mnemonic>movd</mnemonic>
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 6e</opc>
-            <opr>V Ey</opr>
+            <opc>0f 6e /o=16</opc>
+            <opr>P Ey</opr>
+            <cpuid>mmx</cpuid>
         </def>
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>0f 6e</opc>
+            <opc>0f 6e /o=32</opc>
             <opr>P Ey</opr>
+            <cpuid>mmx</cpuid>
         </def>
+
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 7e</opc>
-            <opr>Ey V</opr>
+            <opc>/sse=66 0f 6e /o=16</opc>
+            <opr>V Ey</opr>
+            <cpuid>sse2 avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 6e /o=32</opc>
+            <opr>V Ey</opr>
+            <cpuid>sse2 avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>0f 7e /o=16</opc>
+            <opr>Ey P</opr>
+            <cpuid>mmx</cpuid>
         </def>
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
-            <opc>0f 7e</opc>
+            <opc>0f 7e /o=32</opc>
             <opr>Ey P</opr>
+            <cpuid>mmx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 7e /o=16</opc>
+            <opr>Ey V</opr>
+            <cpuid>sse2 avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 7e /o=32</opc>
+            <opr>Ey V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4800,12 +4937,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 16 /mod=!11</opc>
-            <opr>V M</opr>
+            <opr>V H M</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 17</opc>
             <opr>M V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4814,12 +4953,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 16 /mod=!11</opc>
-            <opr>V M</opr>
+            <opr>V H M</opr>
+            <cpuid>sse avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 17</opc>
             <opr>M V</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -4828,7 +4969,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 16 /mod=11</opc>
-            <opr>V U</opr>
+            <opr>V H U</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -4844,6 +4986,7 @@
             <opc>/sse=66 0f 13</opc>
             <opr>M V</opr>
         </def>
+        <cpuid>sse2 avx</cpuid>
     </instruction>
 
     <instruction>
@@ -4858,6 +5001,7 @@
             <opc>0f 13</opc>
             <opr>M V</opr>
         </def>
+        <cpuid>sse avx</cpuid>
     </instruction>
 
     <instruction>
@@ -4866,15 +5010,17 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 12 /mod=11</opc>
             <opr>V U</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movmskpd</mnemonic>
         <def>
-            <pfx>oso rexr rexb</pfx>
+            <pfx>oso rexr rexb vexl</pfx>
             <opc>/sse=66 0f 50</opc>
             <opr>Gd U</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4884,15 +5030,17 @@
             <pfx>oso rexr rexb</pfx>
             <opc>0f 50</opc>
             <opr>Gd U</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movntdq</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f e7</opc>
             <opr>M V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4908,18 +5056,20 @@
     <instruction>
         <mnemonic>movntpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 2b</opc>
             <opr>M V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movntps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 2b</opc>
             <opr>M V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -4935,24 +5085,52 @@
     <instruction>
         <mnemonic>movq</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f 6f</opc>
-            <opr>P Q</opr>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>0f 6e /o=64</opc>
+            <opr>P Eq</opr>
+            <cpuid>mmx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f d6</opc>
-            <opr>W V</opr>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 6e /o=64</opc>
+            <opr>V Eq</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>0f 7e /o=64</opc>
+            <opr>Eq P</opr>
+            <cpuid>mmx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 7e /o=64</opc>
+            <opr>Eq V</opr>
+            <cpuid>sse2 avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 7e</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/sse=66 0f d6</opc>
+            <opr>W V</opr>
+            <cpuid>sse2 avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>0f 6f</opc>
+            <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>0f 7f</opc>
             <opr>Q P</opr>
+            <cpuid>mmx</cpuid>
         </def>
     </instruction>
 
@@ -4979,14 +5157,16 @@
             <opc>a5 /o=32</opc>
         </def>
         <def>
-            <pfx>rep aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 10</opc>
-            <opr>V W</opr>
+            <opr>V MqU</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
-            <pfx>rep aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 11</opc>
             <opr>W V</opr>
+            <cpuid>sse2</cpuid>
         </def>
     </instruction>
 
@@ -5003,12 +5183,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 10</opc>
-            <opr>V W</opr>
+            <opr>V MdU</opr>
+            <cpuid>sse</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 11</opc>
             <opr>W V</opr>
+            <cpuid>sse</cpuid>
         </def>
     </instruction>
 
@@ -5029,28 +5211,32 @@
     <instruction>
         <mnemonic>movupd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 10</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 11</opc>
             <opr>W V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movups</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 10</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 11</opc>
             <opr>W V</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5085,18 +5271,20 @@
     <instruction>
         <mnemonic>mulpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 59</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>mulps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 59</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5105,7 +5293,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 59</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5114,7 +5303,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 59</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -5141,9 +5331,6 @@
 
     <instruction>
         <mnemonic>nop</mnemonic>
-        <def>
-            <opc>90</opc>
-        </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 19</opc>
@@ -5251,18 +5438,20 @@
     <instruction>
         <mnemonic>orpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 56</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>orps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 56</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -5315,56 +5504,64 @@
     <instruction>
         <mnemonic>packsswb</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 63</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 63</opc>
             <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>packssdw</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 6b</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 6b</opc>
             <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>packuswb</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 67</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 67</opc>
             <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>paddb</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f fc</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f fc</opc>
             <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
         </def>
     </instruction>
 
@@ -5374,11 +5571,13 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f fd</opc>
             <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f fd</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5388,11 +5587,13 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f fe</opc>
             <opr>P Q</opr>
+            <cpuid>mmx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f fe</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5407,7 +5608,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f ec</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5421,7 +5623,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f ed</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5435,7 +5638,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f dc</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5449,7 +5653,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f dd</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5458,7 +5663,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f db</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5472,7 +5678,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f df</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5486,7 +5693,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e0</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5500,7 +5708,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e3</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5519,7 +5728,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 74</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5533,7 +5743,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 75</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5547,7 +5758,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 76</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5556,7 +5768,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 64</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5570,7 +5783,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 65</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5584,7 +5798,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 66</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5597,9 +5812,10 @@
         <mnemonic>pextrb</mnemonic>
         <def>
             <pfx>aso rexx rexr rexb</pfx>
-            <opc>/sse=66 0f 3a 14</opc>
+            <opc>/sse=66 0f 3a 14 /vexw=0</opc>
             <opr>MbRv V Ib</opr>
             <mode>def64</mode>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -5607,13 +5823,15 @@
         <mnemonic>pextrd</mnemonic>
         <def>
             <pfx>aso rexr rexx rexw rexb</pfx>
-            <opc>/sse=66 0f 3a 16 /o=16</opc>
+            <opc>/sse=66 0f 3a 16 /o=16 /vexw=0</opc>
             <opr>Ed V Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexw rexb</pfx>
-            <opc>/sse=66 0f 3a 16 /o=32</opc>
+            <opc>/sse=66 0f 3a 16 /o=32 /vexw=0</opc>
             <opr>Ed V Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -5621,28 +5839,31 @@
         <mnemonic>pextrq</mnemonic>
         <def>
             <pfx>aso rexr rexw rexb</pfx>
-            <opc>/sse=66 0f 3a 16 /o=64</opc>
+            <opc>/sse=66 0f 3a 16 /o=64 /vexw=1</opc>
             <opr>Eq V Ib</opr>
             <mode>def64</mode>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
    <instruction>
         <mnemonic>pextrw</mnemonic>
         <def>
-            <pfx>aso rexr rexb</pfx>
+            <pfx>aso rexw rexr rexb</pfx>
             <opc>/sse=66 0f c5</opc>
             <opr>Gd U Ib</opr>
+            <cpuid>sse avx</cpuid>
         </def>
         <def>
-            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>0f c5</opc>
             <opr>Gd N Ib</opr>
         </def>
         <def>
-            <pfx>aso rexx rexr rexb</pfx>
+            <pfx>aso rexw rexx rexr rexb</pfx>
             <opc>/sse=66 0f 3a 15</opc>
             <opr>MwRd V Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -5652,7 +5873,7 @@
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 20</opc>
             <opr>V MbRd Ib</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1</cpuid>
         </def>
     </instruction>
 
@@ -5669,6 +5890,7 @@
             <opc>/sse=66 0f c4</opc>
             <opr>V MwRy Ib</opr>
             <mode>def64</mode>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5678,14 +5900,14 @@
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 22 /o=16</opc>
             <opr>V Ed Ib</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1</cpuid>
         </def>
  
         <def>
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 22 /o=32</opc>
             <opr>V Ed Ib</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1</cpuid>
         </def>
     </instruction>
 
@@ -5695,10 +5917,48 @@
             <pfx>aso oso rexw rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 22 /o=64</opc>
             <opr>V Eq Ib</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vpinsrb</mnemonic>
+        <def>
+            <pfx>aso rexw rexr rexx rexb</pfx>
+            <opc>/vex=66_0f3a 20 /vexw=0 /vexl=0</opc>
+            <opr>V H MbRd Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vpinsrd</mnemonic>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>/vex=66_0f3a 22 /m=!64 /vexw=0 /vexl=0</opc>
+            <opr>V H Ed Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>/vex=66_0f3a 22 /m=64 /vexw=0 /vexl=0</opc>
+            <opr>V H Ed Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+
+    <instruction>
+        <mnemonic>vpinsrq</mnemonic>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>/vex=66_0f3a 22 /m=64 /vexw=1 /vexl=0</opc>
+            <opr>V H Eq Ib</opr>
+            <cpuid>avx</cpuid>
         </def>
     </instruction>
 
+
     <instruction>
         <mnemonic>pmaddwd</mnemonic>
         <def>
@@ -5709,7 +5969,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f5</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -5718,7 +5979,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f ee</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5737,7 +5999,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f de</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5746,7 +6009,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f ea</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5760,7 +6024,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f da</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5772,12 +6037,13 @@
     <instruction>
         <mnemonic>pmovmskb</mnemonic>
         <def>
-            <pfx>rexr rexb</pfx>
-            <opc>/sse=66 0f d7</opc>
+            <pfx>oso rexr rexw rexb</pfx>
+            <opc>/sse=66 0f d7 /vexl=0</opc>
             <opr>Gd U</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
-            <pfx>oso rexr rexb</pfx>
+            <pfx>oso rexr rexw rexb</pfx>
             <opc>0f d7</opc>
             <opr>Gd N</opr>
         </def>
@@ -5793,7 +6059,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e4</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5802,7 +6069,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e5</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -5821,7 +6089,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d5</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -5959,7 +6228,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f eb</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6053,7 +6323,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f6</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6071,12 +6342,13 @@
         </def>
     </instruction>
 
-    <instruction>
+     <instruction>
         <mnemonic>psllw</mnemonic>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f1</opc>
             <opr>V W</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6087,6 +6359,7 @@
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 71 /reg=6</opc>
             <opr>U Ib</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
             <opc>0f 71 /reg=6</opc>
@@ -6100,6 +6373,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f2</opc>
             <opr>V W</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6110,6 +6384,7 @@
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 72 /reg=6</opc>
             <opr>U Ib</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
             <opc>0f 72 /reg=6</opc>
@@ -6123,6 +6398,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f3</opc>
             <opr>V W</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6133,6 +6409,7 @@
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 73 /reg=6</opc>
             <opr>U Ib</opr>
+            <cpuid>sse2</cpuid>
         </def>
         <def>
             <opc>0f 73 /reg=6</opc>
@@ -6150,12 +6427,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e1</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 71 /reg=4</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <opc>0f 71 /reg=4</opc>
@@ -6172,7 +6451,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e2</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6182,7 +6462,8 @@
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 72 /reg=4</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6200,12 +6481,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d1</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 71 /reg=2</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6223,12 +6506,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d2</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 72 /reg=2</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6246,12 +6531,14 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d3</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 73 /reg=2</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6260,7 +6547,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f8</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6274,7 +6562,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f9</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6293,7 +6582,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f fa</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6307,7 +6597,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e8</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6321,7 +6612,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f e9</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6335,7 +6627,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d8</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6349,7 +6642,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d9</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -6358,7 +6652,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 68</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6372,7 +6667,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 69</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6386,7 +6682,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 6a</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6400,7 +6697,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 60</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6414,7 +6712,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 61</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6428,7 +6727,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 62</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6809,7 +7109,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f ef</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -6957,9 +7258,10 @@
     <instruction>
         <mnemonic>rcpps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 53</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -6969,6 +7271,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 53</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7047,9 +7350,10 @@
     <instruction>
         <mnemonic>rsqrtps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 52</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7059,6 +7363,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 52</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7511,9 +7816,10 @@
     <instruction>
         <mnemonic>shufpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f c6</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7522,7 +7828,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f c6</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7561,9 +7868,10 @@
     <instruction>
         <mnemonic>sqrtps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 51</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7573,6 +7881,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 51</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7581,7 +7890,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 51</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7590,7 +7900,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 51</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7637,6 +7948,7 @@
             <pfx>aso rexw rexr rexx rexb</pfx>
             <opc>0f ae /mod=!11 /reg=3</opc>
             <opr>Md</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7738,18 +8050,20 @@
     <instruction>
         <mnemonic>subpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 5c</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>subps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>0f 5c</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7758,7 +8072,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 5c</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7767,7 +8082,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 5c</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7863,6 +8179,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 2e</opc>
             <opr>V W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7872,6 +8189,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 2e</opc>
             <opr>V W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7885,9 +8203,10 @@
     <instruction>
         <mnemonic>unpckhpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 15</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7896,7 +8215,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 15</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
@@ -7905,16 +8225,18 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 14</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>unpcklpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 14</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -7944,12 +8266,22 @@
         </def>
     </instruction>
 
+    <instruction>
+        <mnemonic>rdrand</mnemonic>
+        <def>
+            <pfx>oso rexr rexw rexx rexb</pfx>
+            <opc>0f c7 /mod=11 /reg=6</opc>
+            <opr>R</opr>
+        </def>
+        <cpuid>rdrand</cpuid>
+    </instruction>
+
     <instruction>
         <mnemonic>vmclear</mnemonic>
         <vendor>intel</vendor>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f c7 /reg=6</opc>
+            <opc>/sse=66 0f c7 /mod=!11 /reg=6</opc>
             <opr>Mq</opr>
         </def>
     </instruction>
@@ -7959,7 +8291,7 @@
         <vendor>intel</vendor>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=f3 0f c7 /reg=6</opc>
+            <opc>/sse=f3 0f c7 /mod=!11 /reg=6</opc>
             <opr>Mq</opr>
         </def>
     </instruction>
@@ -7969,7 +8301,7 @@
         <vendor>intel</vendor>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f c7 /reg=6</opc>
+            <opc>0f c7 /mod=!11 /reg=6</opc>
             <opr>Mq</opr>
         </def>
     </instruction>
@@ -7979,7 +8311,7 @@
         <vendor>intel</vendor>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
-            <opc>0f c7 /reg=7</opc>
+            <opc>0f c7 /mod=!11 /reg=7</opc>
             <opr>Mq</opr>
         </def>
     </instruction>
@@ -8223,9 +8555,10 @@
     <instruction>
         <mnemonic>xorpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 57</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8234,7 +8567,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 57</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8319,78 +8653,14 @@
         </def>
     </instruction>
 
-    <!--
-    AESNI
-      -->
-
-    <instruction>
-        <mnemonic>aesdec</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 38 de</opc>
-        <opr>V W</opr>
-    </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>aesdeclast</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 38 df</opc>
-        <opr>V W</opr>
-    </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>aesenc</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 38 dc</opc>
-        <opr>V W</opr>
-    </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>aesenclast</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 38 dd</opc>
-        <opr>V W</opr>
-    </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>aesimc</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 38 db</opc>
-        <opr>V W</opr>
-    </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>aeskeygenassist</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 3a df</opc>
-        <opr>V W Ib</opr>
-    </def>
-    </instruction>
-
     <instruction>
         <mnemonic>pclmulqdq</mnemonic>
-    <class>aesni</class>
-    <def>
-        <pfx>aso rexr rexx rexb</pfx>
-        <opc>/sse=66 0f 3a 44</opc>
-        <opr>V W Ib</opr>
-    </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 3a 44</opc>
+            <opr>V H W Ib</opr>
+            <cpuid>aesni avx</cpuid>
+        </def>
     </instruction>
 
     <!--
@@ -8399,7 +8669,7 @@
 
     <instruction>
         <mnemonic>getsec</mnemonic>
-    <class>smx</class>
+    <cpuid>smx</cpuid>
     <def>
         <opc>0f 37</opc>
     </def>
@@ -8412,24 +8682,25 @@
     <instruction>
         <mnemonic>movdqa</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 7f</opc>
             <opr>W V</opr>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 6f</opc>
             <opr>V W</opr>
         </def>
+        <cpuid>sse2 avx</cpuid>
     </instruction>
 
     <instruction>
         <mnemonic>maskmovdqu</mnemonic>
-        <class>sse2</class>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f f7 /mod=11</opc>
             <opr>V U</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8445,15 +8716,16 @@
     <instruction>
         <mnemonic>movdqu</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 6f</opc>
             <opr>V W</opr>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 7f</opc>
             <opr>W V</opr>
         </def>
+		<cpuid>sse2 avx</cpuid>
     </instruction>
 
     <instruction>
@@ -8475,7 +8747,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f d4</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8484,7 +8757,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f fb</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
         <def>
             <pfx>aso rexr rexx rexb</pfx>
@@ -8513,6 +8787,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f3 0f 70</opc>
             <opr>V W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8522,6 +8797,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=f2 0f 70</opc>
             <opr>V W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8531,6 +8807,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 70</opc>
             <opr>V W Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8539,7 +8816,8 @@
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 73 /reg=7</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8548,7 +8826,8 @@
         <def>
             <pfx>rexb</pfx>
             <opc>/sse=66 0f 73 /reg=3</opc>
-            <opr>U Ib</opr>
+            <opr>H U Ib</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8557,7 +8836,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 6d</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -8566,66 +8846,68 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 6c</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
-    <!--
-         SSE 3
-      -->
-
     <instruction>
-        <mnemonic>addsubpd</mnemonic>
-        <class>sse3</class>
+        <mnemonic>haddpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f d0</opc>
-            <opr>V W</opr>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=66 0f 7c</opc>
+            <opr>V H W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>addsubps</mnemonic>
+        <mnemonic>haddps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=f2 0f d0</opc>
-            <opr>V W</opr>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=f2 0f 7c</opc>
+            <opr>V H W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>haddpd</mnemonic>
+        <mnemonic>hsubpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 7c</opc>
-            <opr>V W</opr>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=66 0f 7d</opc>
+            <opr>V H W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>haddps</mnemonic>
+        <mnemonic>hsubps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=f2 0f 7c</opc>
-            <opr>V W</opr>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=f2 0f 7d</opc>
+            <opr>V H W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>hsubpd</mnemonic>
+        <mnemonic>insertps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 7d</opc>
-            <opr>V W</opr>
+            <pfx>aso rexr rexw rexx rexb</pfx>
+            <opc>/sse=66 0f 3a 21</opc>
+            <opr>V H Md Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>hsubps</mnemonic>
+        <mnemonic>lddqu</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=f2 0f 7d</opc>
-            <opr>V W</opr>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=f2 0f f0</opc>
+            <opr>V M</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8641,33 +8923,38 @@
             <opc>/sse=f2 0f 12 /mod=!11</opc>
             <opr>V W</opr>
         </def>
+        <cpuid>sse3 avx</cpuid>
     </instruction>
 
     <instruction>
         <mnemonic>movshdup</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 16 /mod=11</opc>
             <opr>V W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 16 /mod=!11</opc>
             <opr>V W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movsldup</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 12 /mod=11</opc>
             <opr>V W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=f3 0f 12 /mod=!11</opc>
             <opr>V W</opr>
+            <cpuid>sse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8681,11 +8968,13 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 38 1c</opc>
             <opr>P Q</opr>
+            <cpuid>ssse3</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 38 1c</opc>
             <opr>V W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8695,11 +8984,13 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 38 1d</opc>
             <opr>P Q</opr>
+            <cpuid>ssse3</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 38 1d</opc>
             <opr>V W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8709,11 +9000,13 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>0f 38 1e</opc>
             <opr>P Q</opr>
+            <cpuid>ssse3</cpuid>
         </def>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 38 1e</opc>
             <opr>V W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8727,7 +9020,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 00</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8741,7 +9035,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 01</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8755,7 +9050,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 02</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8769,7 +9065,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 03</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8783,7 +9080,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 04</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8797,7 +9095,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 05</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8811,7 +9110,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 06</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8825,7 +9125,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 07</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8839,7 +9140,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 08</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8853,7 +9155,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 0a</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8867,7 +9170,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 09</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8881,7 +9185,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 0b</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8895,7 +9200,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 0f</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>ssse3 avx</cpuid>
         </def>
     </instruction>
 
@@ -8909,6 +9215,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 10</opc>
             <opr>V W</opr>
+            <cpuid>sse4.1</cpuid>
         </def>
     </instruction>
 
@@ -8917,8 +9224,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 28</opc>
-            <opr>V W</opr>
-            <class>sse4.1</class>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8927,7 +9234,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 38</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8936,7 +9244,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 39</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8945,7 +9254,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 3a</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8954,7 +9264,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 3b</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8963,7 +9274,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 3c</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8972,7 +9284,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 3d</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8981,7 +9294,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 3f</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8990,7 +9304,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 3e</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -8999,8 +9314,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 40</opc>
-            <opr>V W</opr>
-            <class>sse4.1</class>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9010,24 +9325,27 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 41</opc>
             <opr>V W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>roundps</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 3a 08</opc>
             <opr>V W Ib</opr>
+            <cpuid>sse avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>roundpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 3a 09</opc>
             <opr>V W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9036,7 +9354,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 0a</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9045,25 +9364,18 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 0b</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>blendpd</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
+            <pfx>aso rexr rexx rexb vexl</pfx>
             <opc>/sse=66 0f 3a 0d</opc>
-            <opr>V W Ib</opr>
-        </def>
-    </instruction>
-
-    <instruction>
-        <mnemonic>pblendw</mnemonic>
-        <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 3a 0e</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9072,7 +9384,8 @@
         <def>
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 3a 0c</opc>
-            <opr>V W Ib</opr>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9082,6 +9395,7 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 15</opc>
             <opr>V W</opr>
+            <cpuid>sse4.1</cpuid>
         </def>
     </instruction>
 
@@ -9091,69 +9405,174 @@
             <pfx>aso rexr rexx rexb</pfx>
             <opc>/sse=66 0f 38 14</opc>
             <opr>V W</opr>
+            <cpuid>sse4.1</cpuid>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>dpps</mnemonic>
+        <mnemonic>bound</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 3a 40</opc>
-            <opr>V W Ib</opr>
+            <pfx>aso oso</pfx>
+            <opc>62 /m=!64</opc>
+            <opr>Gv M</opr>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>dppd</mnemonic>
+        <mnemonic>bsf</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 3a 41</opc>
-            <opr>V W Ib</opr>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f bc</opc>
+            <opr>Gv Ev</opr>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>mpsadbw</mnemonic>
+        <mnemonic>bsr</mnemonic>
         <def>
-            <pfx>aso rexr rexx rexb</pfx>
-            <opc>/sse=66 0f 3a 42</opc>
-            <opr>V W Ib</opr>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f bd</opc>
+            <opr>Gv Ev</opr>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>extractps</mnemonic>
+        <mnemonic>bswap</mnemonic>
         <def>
-            <pfx>aso rexr rexw rexx rexb</pfx>
-            <opc>/sse=66 0f 3a 17</opc>
-            <opr>MdRy V Ib</opr>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f c8</opc>
+            <opr>R0y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f c9</opc>
+            <opr>R1y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f ca</opc>
+            <opr>R2y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f cb</opc>
+            <opr>R3y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f cc</opc>
+            <opr>R4y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f cd</opc>
+            <opr>R5y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f ce</opc>
+            <opr>R6y</opr>
+        </def>
+        <def>
+            <pfx>oso rexw rexb</pfx>
+            <opc>0f cf</opc>
+            <opr>R7y</opr>
         </def>
     </instruction>
 
     <instruction>
-        <mnemonic>insertps</mnemonic>
+        <mnemonic>bt</mnemonic>
         <def>
-            <pfx>aso rexr rexw rexx rexb</pfx>
-            <opc>/sse=66 0f 3a 21</opc>
-            <opr>V Md Ib</opr>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f ba /reg=4</opc>
+            <opr>Ev Ib</opr>
+        </def>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f a3</opc>
+            <opr>Ev Gv</opr>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>btc</mnemonic>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f bb</opc>
+            <opr>Ev Gv</opr>
+        </def>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f ba /reg=7</opc>
+            <opr>Ev Ib</opr>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>btr</mnemonic>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f b3</opc>
+            <opr>Ev Gv</opr>
+        </def>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f ba /reg=6</opc>
+            <opr>Ev Ib</opr>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>bts</mnemonic>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f ab</opc>
+            <opr>Ev Gv</opr>
+        </def>
+        <def>
+            <pfx>aso oso rexw rexr rexx rexb</pfx>
+            <opc>0f ba /reg=5</opc>
+            <opr>Ev Ib</opr>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>pblendw</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/sse=66 0f 3a 0e</opc>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>mpsadbw</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/sse=66 0f 3a 42</opc>
+            <opr>V H W Ib</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>movntdqa</mnemonic>
         <def>
-            <pfx>aso rexr rexw rexx rexb</pfx>
+            <pfx>aso rexr rexw rexx rexb vexl</pfx>
             <opc>/sse=66 0f 38 2a</opc>
-            <opr>V Mo</opr>
+            <opr>V M</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
     <instruction>
         <mnemonic>packusdw</mnemonic>
         <def>
-            <pfx>aso rexr rexw rexx rexb</pfx>
+            <pfx>aso rexr rexw rexx rexb vexl</pfx>
             <opc>/sse=66 0f 38 2b</opc>
-            <opr>V W</opr>
+            <opr>V H W</opr>
+            <cpuid>sse2 avx</cpuid>
         </def>
     </instruction>
 
@@ -9163,7 +9582,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 20</opc>
             <opr>V MqU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9173,7 +9592,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 21</opc>
             <opr>V MdU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9183,7 +9602,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 22</opc>
             <opr>V MwU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9193,7 +9612,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 23</opc>
             <opr>V MqU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9203,7 +9622,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 24</opc>
             <opr>V MdU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9213,7 +9632,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 25</opc>
             <opr>V MqU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1</cpuid>
         </def>
     </instruction>
 
@@ -9223,7 +9642,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 30</opc>
             <opr>V MqU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9233,7 +9652,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 31</opc>
             <opr>V MdU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9243,7 +9662,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 32</opc>
             <opr>V MwU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9253,7 +9672,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 33</opc>
             <opr>V MqU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9263,7 +9682,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 34</opc>
             <opr>V MdU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9273,7 +9692,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 35</opc>
             <opr>V MqU</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9282,8 +9701,8 @@
         <def>
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 29</opc>
-            <opr>V W</opr>
-            <class>sse4.1</class>
+            <opr>V H W</opr>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9294,16 +9713,16 @@
             <opc>/sse=f3 0f b8</opc>
             <opr>Gv Ev</opr>
         </def>
-        <class>sse4.2</class>
+        <cpuid>sse4.2</cpuid>
     </instruction>
 
     <instruction>
         <mnemonic>ptest</mnemonic>
         <def>
-            <pfx>aso rexr rexw rexx rexb</pfx>
+            <pfx>aso rexr rexw rexx rexb vexl</pfx>
             <opc>/sse=66 0f 38 17</opc>
             <opr>V W</opr>
-            <class>sse4.1</class>
+            <cpuid>sse4.1 avx</cpuid>
         </def>
     </instruction>
 
@@ -9313,7 +9732,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 3a 61</opc>
             <opr>V W Ib</opr>
-            <class>sse4.2</class>
+            <cpuid>sse4.2 avx</cpuid>
         </def>
     </instruction>
 
@@ -9323,7 +9742,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 3a 60</opc>
             <opr>V W Ib</opr>
-            <class>sse4.2</class>
+            <cpuid>sse4.2 avx</cpuid>
         </def>
     </instruction>
 
@@ -9332,8 +9751,8 @@
         <def>
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 38 37</opc>
-            <opr>V W</opr>
-            <class>sse4.2</class>
+            <opr>V H W</opr>
+            <cpuid>sse4.2 avx</cpuid>
         </def>
     </instruction>
 
@@ -9343,7 +9762,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 3a 63</opc>
             <opr>V W Ib</opr>
-            <class>sse4.2</class>
+            <cpuid>sse4.2 avx</cpuid>
         </def>
     </instruction>
 
@@ -9353,7 +9772,7 @@
             <pfx>aso rexr rexw rexx rexb</pfx>
             <opc>/sse=66 0f 3a 62</opc>
             <opr>V W Ib</opr>
-            <class>sse4.2</class>
+            <cpuid>sse4.2 avx</cpuid>
         </def>
     </instruction>
 
@@ -9363,13 +9782,13 @@
             <pfx>aso oso rexr rexw rexx rexb</pfx>
             <opc>0f 38 f0</opc>
             <opr>Gv Mv</opr>
-            <class>sse3 atom</class>
+            <cpuid>sse3 atom</cpuid>
         </def>
         <def>
             <pfx>aso oso rexr rexw rexx rexb</pfx>
             <opc>0f 38 f1</opc>
             <opr>Mv Gv</opr>
-            <class>sse3 atom</class>
+            <cpuid>sse3 atom</cpuid>
         </def>
     </instruction>
 
@@ -9379,13 +9798,13 @@
             <pfx>aso oso rexr rexw rexx rexb</pfx>
             <opc>/sse=f2 0f 38 f0</opc>
             <opr>Gy Eb</opr>
-            <class>sse4.2</class>
+            <cpuid>sse4.2</cpuid>
         </def>
         <def>
             <pfx>aso oso rexr rexw rexx rexb</pfx>
             <opc>/sse=f2 0f 38 f1</opc>
             <opr>Gy Ev</opr>
-            <class>sse4.2</class>
+            <cpuid>sse4.2</cpuid>
         </def>
     </instruction>
 
@@ -9393,4 +9812,288 @@
         <mnemonic>invalid</mnemonic>
     </instruction>
 
+    <instruction>
+        <mnemonic>vbroadcastss</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 18 /vexw=0</opc>
+            <opr>V Md</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vbroadcastsd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 19 /vexw=0 /vexl=1</opc>
+            <opr>Vqq Mq</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vextractf128</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 19 /vexw=0 /vexl=1</opc>
+            <opr>Wdq Vqq Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vinsertf128</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 18 /vexw=0 /vexl=1</opc>
+            <opr>Vqq Hqq Wdq Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vmaskmovps</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 2c /vexw=0</opc>
+            <opr>V H M</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 2e /vexw=0</opc>
+            <opr>M H V</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vmaskmovpd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 2d /vexw=0</opc>
+            <opr>V H M</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 2f /vexw=0</opc>
+            <opr>M H V</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vpermilpd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 0d /vexw=0</opc>
+            <opr>Vx Hx Wx</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 05 /vexw=0</opc>
+            <opr>V W Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vpermilps</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 0c /vexw=0</opc>
+            <opr>Vx Hx Wx</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 04 /vexw=0</opc>
+            <opr>Vx Wx Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vperm2f128</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 06 /vexw=0 /vexl=1</opc>
+            <opr>Vqq Hqq Wqq Ib</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vtestps</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 0e /vexw=0</opc>
+            <opr>Vx Wx</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vtestpd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f38 0f /vexw=0</opc>
+            <opr>Vx Wx</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vzeroupper</mnemonic>
+        <def>
+            <opc>/vex=0f 77 /vexl=0</opc>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vzeroall</mnemonic>
+        <def>
+            <opc>/vex=0f 77 /vexl=1</opc>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vblendvpd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 4b /vexw=0</opc>
+            <opr>Vx Hx Wx Lx</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vblendvps</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb vexl</pfx>
+            <opc>/vex=66_0f3a 4a /vexw=0</opc>
+            <opr>Vx Hx Wx Lx</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vmovsd</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f2_0f 10 /mod=11</opc>
+            <opr>V H U</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f2_0f 10 /mod=!11</opc>
+            <opr>V Mq</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f2_0f 11 /mod=11</opc>
+            <opr>U H V</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f2_0f 11 /mod=!11</opc>
+            <opr>Mq V</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vmovss</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f3_0f 10 /mod=11</opc>
+            <opr>V H U</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f3_0f 10 /mod=!11</opc>
+            <opr>V Md</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f3_0f 11 /mod=11</opc>
+            <opr>U H V</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=f3_0f 11 /mod=!11</opc>
+            <opr>Md V</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vpblendvb</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f3a 4c /vexw=0</opc>
+            <opr>V H W L</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+    <instruction>
+        <mnemonic>vpsllw</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f f1 /vexl=0</opc>
+            <opr>V H W</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f 71 /reg=6 /vexl=0</opc>
+            <opr>H V W</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+     <instruction>
+        <mnemonic>vpslld</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f f2 /vexl=0</opc>
+            <opr>V H W</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f 72 /reg=6 /vexl=0</opc>
+            <opr>H V W</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+
+      <instruction>
+        <mnemonic>vpsllq</mnemonic>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f f3 /vexl=0</opc>
+            <opr>V H W</opr>
+            <cpuid>avx</cpuid>
+        </def>
+        <def>
+            <pfx>aso rexr rexx rexb</pfx>
+            <opc>/vex=66_0f 73 /reg=6 /vexl=0</opc>
+            <opr>H V W</opr>
+            <cpuid>avx</cpuid>
+        </def>
+    </instruction>
+ 
 </x86optable>
diff --git a/libudis86/Makefile.am b/libudis86/Makefile.am
index ca84b9c..c61cf9d 100644
--- a/libudis86/Makefile.am
+++ b/libudis86/Makefile.am
@@ -7,29 +7,29 @@ OPTABLE = @top_srcdir@/docs/x86/optable.xml
 
 MAINTAINERCLEANFILES = Makefile.in
 
-lib_LTLIBRARIES	= libudis86.la
-
-libudis86_la_SOURCES =	\
-    itab.c \
-    decode.c \
-    syn.c \
-    syn-intel.c \
-    syn-att.c \
-    udis86.c \
+lib_LTLIBRARIES = libudis86.la
+
+libudis86_la_SOURCES = \
+	itab.c \
+	decode.c \
+	syn.c \
+	syn-intel.c \
+	syn-att.c \
+	udis86.c \
 	udint.h \
-    syn.h \
-    decode.h
+	syn.h \
+	decode.h
 
 include_ladir = ${includedir}/libudis86
 include_la_HEADERS = \
-    types.h \
-    extern.h \
-    itab.h
+	types.h \
+	extern.h \
+	itab.h
 
 
 BUILT_SOURCES = \
-    itab.c \
-    itab.h
+	itab.c \
+	itab.h
 
 #
 # DLLs may not contain undefined symbol references.  
@@ -40,9 +40,8 @@ libudis86_la_LDFLAGS = -no-undefined -version-info 0:0:0
 endif
 
 itab.c itab.h: $(OPTABLE) \
-			   $(top_srcdir)/scripts/ud_itab.py \
-               $(top_srcdir)/scripts/ud_opcode.py \
-               $(top_srcdir)/scripts/ud_optable.py
+               $(top_srcdir)/scripts/ud_itab.py \
+               $(top_srcdir)/scripts/ud_opcode.py
 	$(PYTHON) $(top_srcdir)/scripts/ud_itab.py $(OPTABLE) $(srcdir)
 
 
diff --git a/libudis86/decode.c b/libudis86/decode.c
index b4efa77..036b9ed 100644
--- a/libudis86/decode.c
+++ b/libudis86/decode.c
@@ -25,6 +25,7 @@
  */
 #include "udint.h"
 #include "types.h"
+#include "extern.h"
 #include "decode.h"
 
 #ifndef __UD_STANDALONE__
@@ -56,6 +57,7 @@
 #define MODRM_RM(b)     ( ( b ) & 7 )
 
 static int decode_ext(struct ud *u, uint16_t ptr);
+static int decode_opcode(struct ud *u);
 
 enum reg_class { /* register classes */
   REGCLASS_GPR,
@@ -76,6 +78,28 @@ inp_start(struct ud *u)
   u->inp_ctr = 0;
 }
 
+static uint8_t
+inp_peek(struct ud *u)
+{
+  if (u->inp_end == 0) {
+    if (u->inp_buf != NULL) {
+      if (u->inp_buf_index < u->inp_buf_size) {
+        return u->inp_buf[u->inp_buf_index];
+      }
+    } else if (u->inp_peek != UD_EOI) {
+      return u->inp_peek;
+    } else {
+      int c;
+      if ((c = u->inp_hook(u)) != UD_EOI) {
+        u->inp_peek = c;
+        return u->inp_peek;
+      }
+    }
+  }
+  u->inp_end = 1;
+  UDERR(u, "byte expected, eoi received\n");
+  return 0;
+}
    
 static uint8_t
 inp_next(struct ud *u)
@@ -87,8 +111,9 @@ inp_next(struct ud *u)
         return (u->inp_curr = u->inp_buf[u->inp_buf_index++]);
       }
     } else {
-      int c;
-      if ((c = u->inp_hook(u)) != UD_EOI) {
+      int c = u->inp_peek;
+      if (c != UD_EOI || (c = u->inp_hook(u)) != UD_EOI) {
+        u->inp_peek = UD_EOI;
         u->inp_curr = c;
         u->inp_sess[u->inp_ctr++] = u->inp_curr;
         return u->inp_curr;
@@ -167,7 +192,7 @@ inp_uint64(struct ud* u)
 }
 
 
-static inline int
+static UD_INLINE int
 eff_opr_mode(int dis_mode, int rex_w, int pfx_opr)
 {
   if (dis_mode == 64) {
@@ -181,7 +206,7 @@ eff_opr_mode(int dis_mode, int rex_w, int pfx_opr)
 }
 
 
-static inline int
+static UD_INLINE int
 eff_adr_mode(int dis_mode, int pfx_adr)
 {
   if (dis_mode == 64) {
@@ -204,7 +229,7 @@ static int
 decode_prefixes(struct ud *u)
 {
   int done = 0;
-  uint8_t curr, last = 0;
+  uint8_t curr = 0, last = 0;
   UD_RETURN_ON_ERROR(u);
 
   do {
@@ -264,10 +289,31 @@ decode_prefixes(struct ud *u)
 }
 
 
-static inline unsigned int modrm( struct ud * u )
+/*
+ * vex_l, vex_w
+ *  Return the vex.L and vex.W bits
+ */
+static UD_INLINE uint8_t
+vex_l(const struct ud *u)
+{
+  UD_ASSERT(u->vex_op != 0);
+  return ((u->vex_op == 0xc4 ? u->vex_b2 : u->vex_b1) >> 2) & 1;
+}
+
+static UD_INLINE uint8_t
+vex_w(const struct ud *u)
+{
+  UD_ASSERT(u->vex_op != 0);
+  return u->vex_op == 0xc4 ? ((u->vex_b2 >> 7) & 1) : 0;
+}
+
+
+static UD_INLINE uint8_t
+modrm(struct ud * u)
 {
     if ( !u->have_modrm ) {
         u->modrm = inp_next( u );
+        u->modrm_offset = (uint8_t) (u->inp_ctr - 1);
         u->have_modrm = 1;
     }
     return u->modrm;
@@ -275,21 +321,23 @@ static inline unsigned int modrm( struct ud * u )
 
 
 static unsigned int
-resolve_operand_size( const struct ud * u, unsigned int s )
+resolve_operand_size(const struct ud* u, ud_operand_size_t osize)
 {
-    switch ( s ) 
-    {
-    case SZ_V:
-        return ( u->opr_mode );
-    case SZ_Z:  
-        return ( u->opr_mode == 16 ) ? 16 : 32;
-    case SZ_Y:
-        return ( u->opr_mode == 16 ) ? 32 : u->opr_mode;
-    case SZ_RDQ:
-        return ( u->dis_mode == 64 ) ? 64 : 32;
-    default:
-        return s;
-    }
+  switch (osize) {
+  case SZ_V:
+    return u->opr_mode;
+  case SZ_Z:  
+    return u->opr_mode == 16 ? 16 : 32;
+  case SZ_Y:
+    return u->opr_mode == 16 ? 32 : u->opr_mode;
+  case SZ_RDQ:
+    return u->dis_mode == 64 ? 64 : 32;
+  case SZ_X:
+    UD_ASSERT(u->vex_op != 0);
+    return (P_VEXL(u->itab_entry->prefix) && vex_l(u)) ?  SZ_QQ : SZ_DQ;
+  default:
+    return osize;
+  }
 }
 
 
@@ -388,7 +436,9 @@ decode_reg(struct ud *u,
   switch (type) {
     case REGCLASS_GPR : reg = decode_gpr(u, size, num); break;
     case REGCLASS_MMX : reg = UD_R_MM0  + (num & 7); break;
-    case REGCLASS_XMM : reg = UD_R_XMM0 + num; break;
+    case REGCLASS_XMM :
+      reg = num + (size == SZ_QQ ? UD_R_YMM0 : UD_R_XMM0);
+      break;
     case REGCLASS_CR : reg = UD_R_CR0  + num; break;
     case REGCLASS_DB : reg = UD_R_DR0  + num; break;
     case REGCLASS_SEG : {
@@ -471,13 +521,13 @@ decode_mem_disp(struct ud* u, unsigned int size, struct ud_operand *op)
  *    Decodes reg field of mod/rm byte
  * 
  */
-static inline void
+static UD_INLINE void
 decode_modrm_reg(struct ud         *u, 
                  struct ud_operand *operand,
                  unsigned int       type,
                  unsigned int       size)
 {
-  uint8_t reg = (REX_R(u->pfx_rex) << 3) | MODRM_REG(modrm(u));
+  uint8_t reg = (REX_R(u->_rex) << 3) | MODRM_REG(modrm(u));
   decode_reg(u, operand, type, reg, size);
 }
 
@@ -500,7 +550,7 @@ decode_modrm_rm(struct ud         *u,
 
   /* get mod, r/m and reg fields */
   mod = MODRM_MOD(modrm(u));
-  rm  = (REX_B(u->pfx_rex) << 3) | MODRM_RM(modrm(u));
+  rm  = (REX_B(u->_rex) << 3) | MODRM_RM(modrm(u));
 
   /* 
    * If mod is 11b, then the modrm.rm specifies a register.
@@ -535,14 +585,14 @@ decode_modrm_rm(struct ud         *u,
     if ((rm & 7) == 4) {
       inp_next(u);
       
-      op->scale = (1 << SIB_S(inp_curr(u))) & ~1;
-      op->index = UD_R_RAX + (SIB_I(inp_curr(u)) | (REX_X(u->pfx_rex) << 3));
-      op->base  = UD_R_RAX + (SIB_B(inp_curr(u)) | (REX_B(u->pfx_rex) << 3));
-
+      op->base  = UD_R_RAX + (SIB_B(inp_curr(u)) | (REX_B(u->_rex) << 3));
+      op->index = UD_R_RAX + (SIB_I(inp_curr(u)) | (REX_X(u->_rex) << 3));
       /* special conditions for base reference */
       if (op->index == UD_R_RSP) {
         op->index = UD_NONE;
         op->scale = UD_NONE;
+      } else {
+        op->scale = (1 << SIB_S(inp_curr(u))) & ~1;
       }
 
       if (op->base == UD_R_RBP || op->base == UD_R_R13) {
@@ -555,6 +605,9 @@ decode_modrm_rm(struct ud         *u,
           offset = 32;
         }
       }
+    } else {
+        op->scale = UD_NONE;
+        op->index = UD_NONE;
     }
   } else if (u->adr_mode == 32) {
     op->base = UD_R_EAX + rm;
@@ -593,6 +646,9 @@ decode_modrm_rm(struct ud         *u,
           offset = 32;
         }
       }
+    } else {
+      op->scale = UD_NONE;
+      op->index = UD_NONE;
     }
   } else {
     const unsigned int bases[]   = { UD_R_BX, UD_R_BX, UD_R_BP, UD_R_BP,
@@ -601,6 +657,7 @@ decode_modrm_rm(struct ud         *u,
                                      UD_NONE, UD_NONE, UD_NONE, UD_NONE };
     op->base  = bases[rm & 7];
     op->index = indices[rm & 7];
+    op->scale = UD_NONE;
     if (mod == 0 && rm == 6) {
       offset = 16;
       op->base = UD_NONE;
@@ -613,6 +670,8 @@ decode_modrm_rm(struct ud         *u,
 
   if (offset) {
     decode_mem_disp(u, offset, op);
+  } else {
+    op->offset = 0;
   }
 }
 
@@ -624,15 +683,46 @@ decode_modrm_rm(struct ud         *u,
 static void
 decode_moffset(struct ud *u, unsigned int size, struct ud_operand *opr)
 {
-  opr->type = UD_OP_MEM;
-  opr->size = resolve_operand_size(u, size);
+  opr->type  = UD_OP_MEM;
+  opr->base  = UD_NONE;
+  opr->index = UD_NONE;
+  opr->scale = UD_NONE;
+  opr->size  = resolve_operand_size(u, size);
   decode_mem_disp(u, u->adr_mode, opr);
 }
 
 
-/* -----------------------------------------------------------------------------
- * decode_operands() - Disassembles Operands.
- * -----------------------------------------------------------------------------
+static void
+decode_vex_vvvv(struct ud *u, struct ud_operand *opr, unsigned size)
+{
+  uint8_t vvvv;
+  UD_ASSERT(u->vex_op != 0);
+  vvvv = ((u->vex_op == 0xc4 ? u->vex_b2 : u->vex_b1) >> 3) & 0xf;
+  decode_reg(u, opr, REGCLASS_XMM, (0xf & ~vvvv), size);
+}
+
+
+/* 
+ * decode_vex_immreg
+ *    Decode source operand encoded in immediate byte [7:4]
+ */
+static int
+decode_vex_immreg(struct ud *u, struct ud_operand *opr, unsigned size)
+{
+  uint8_t imm  = inp_next(u);
+  uint8_t mask = u->dis_mode == 64 ? 0xf : 0x7;
+  UD_RETURN_ON_ERROR(u);
+  UD_ASSERT(u->vex_op != 0);
+  decode_reg(u, opr, REGCLASS_XMM, mask & (imm >> 4), size);
+  return 0;
+}
+
+
+/* 
+ * decode_operand
+ *
+ *      Decodes a single operand.
+ *      Returns the type of the operand (UD_NONE if none)
  */
 static int
 decode_operand(struct ud           *u, 
@@ -640,6 +730,7 @@ decode_operand(struct ud           *u,
                enum ud_operand_code type,
                unsigned int         size)
 {
+  operand->type = UD_NONE;
   operand->_oprcode = type;
 
   switch (type) {
@@ -695,6 +786,9 @@ decode_operand(struct ud           *u,
     case OP_V:
       decode_modrm_reg(u, operand, REGCLASS_XMM, size);
       break;
+    case OP_H:
+      decode_vex_vvvv(u, operand, size);
+      break;
     case OP_MU:
       decode_modrm_rm(u, operand, REGCLASS_XMM, 
                       MODRM_MOD(modrm(u)) == 3 ? 
@@ -715,7 +809,7 @@ decode_operand(struct ud           *u,
     case OP_R6: 
     case OP_R7:
       decode_reg(u, operand, REGCLASS_GPR, 
-                 (REX_B(u->pfx_rex) << 3) | (type - OP_R0), size);
+                 (REX_B(u->_rex) << 3) | (type - OP_R0), size);
       break;
     case OP_AL:
     case OP_AX:
@@ -781,10 +875,14 @@ decode_operand(struct ud           *u,
       operand->base = (type - OP_ST0) + UD_R_ST0;
       operand->size = 80;
       break;
+    case OP_L:
+      decode_vex_immreg(u, operand, size);
+      break;
     default :
+      operand->type = UD_NONE;
       break;
   }
-  return 0;
+  return operand->type;
 }
 
 
@@ -801,12 +899,21 @@ decode_operands(struct ud* u)
   decode_operand(u, &u->operand[0],
                     u->itab_entry->operand1.type,
                     u->itab_entry->operand1.size);
-  decode_operand(u, &u->operand[1],
-                    u->itab_entry->operand2.type,
-                    u->itab_entry->operand2.size);
-  decode_operand(u, &u->operand[2],
-                    u->itab_entry->operand3.type,
-                    u->itab_entry->operand3.size);
+  if (u->operand[0].type != UD_NONE) {
+      decode_operand(u, &u->operand[1],
+                        u->itab_entry->operand2.type,
+                        u->itab_entry->operand2.size);
+  }
+  if (u->operand[1].type != UD_NONE) {
+      decode_operand(u, &u->operand[2],
+                        u->itab_entry->operand3.type,
+                        u->itab_entry->operand3.size);
+  }
+  if (u->operand[2].type != UD_NONE) {
+      decode_operand(u, &u->operand[3],
+                        u->itab_entry->operand4.type,
+                        u->itab_entry->operand4.size);
+  }
   return 0;
 }
     
@@ -831,14 +938,16 @@ clear_insn(register struct ud* u)
   u->itab_entry = NULL;
   u->have_modrm = 0;
   u->br_far    = 0;
-
-  memset( &u->operand[ 0 ], 0, sizeof( struct ud_operand ) );
-  memset( &u->operand[ 1 ], 0, sizeof( struct ud_operand ) );
-  memset( &u->operand[ 2 ], 0, sizeof( struct ud_operand ) );
+  u->vex_op    = 0;
+  u->_rex      = 0;
+  u->operand[0].type = UD_NONE;
+  u->operand[1].type = UD_NONE;
+  u->operand[2].type = UD_NONE;
+  u->operand[3].type = UD_NONE;
 }
 
 
-static inline int
+static UD_INLINE int
 resolve_pfx_str(struct ud* u)
 {
   if (u->pfx_str == 0xf3) {
@@ -870,18 +979,30 @@ resolve_mode( struct ud* u )
       return -1;
     }
 
-    /* effective rex prefix is the  effective mask for the 
-     * instruction hard-coded in the opcode map.
+    /* compute effective rex based on,
+     *  - vex prefix (if any)
+     *  - rex prefix (if any, and not vex)
+     *  - allowed prefixes specified by the opcode map
      */
-    u->pfx_rex = ( u->pfx_rex & 0x40 ) | 
-                 ( u->pfx_rex & REX_PFX_MASK( u->itab_entry->prefix ) ); 
+    if (u->vex_op == 0xc4) {
+        /* vex has rex.rxb in 1's complement */
+        u->_rex = ((~(u->vex_b1 >> 5) & 0x7) /* rex.0rxb */ | 
+                   ((u->vex_b2  >> 4) & 0x8) /* rex.w000 */);
+    } else if (u->vex_op == 0xc5) {
+        /* vex has rex.r in 1's complement */
+        u->_rex = (~(u->vex_b1 >> 5)) & 4;
+    } else {
+        UD_ASSERT(u->vex_op == 0);
+        u->_rex = u->pfx_rex;
+    }
+    u->_rex &= REX_PFX_MASK(u->itab_entry->prefix);
 
     /* whether this instruction has a default operand size of 
      * 64bit, also hardcoded into the opcode map.
      */
     default64 = P_DEF64( u->itab_entry->prefix ); 
     /* calculate effective operand size */
-    if ( REX_W( u->pfx_rex ) ) {
+    if (REX_W(u->_rex)) {
         u->opr_mode = 64;
     } else if ( u->pfx_opr ) {
         u->opr_mode = 16;
@@ -907,7 +1028,7 @@ resolve_mode( struct ud* u )
 }
 
 
-static inline int
+static UD_INLINE int
 decode_insn(struct ud *u, uint16_t ptr)
 {
   UD_ASSERT((ptr & 0x8000) == 0);
@@ -931,7 +1052,7 @@ decode_insn(struct ud *u, uint16_t ptr)
  *    valid entry in the table, decode the operands, and read the final
  *    byte to resolve the menmonic.
  */
-static inline int
+static UD_INLINE int
 decode_3dnow(struct ud* u)
 {
   uint16_t ptr;
@@ -986,6 +1107,36 @@ decode_ssepfx(struct ud *u)
 }
 
 
+static int
+decode_vex(struct ud *u)
+{
+  uint8_t index;
+  if (u->dis_mode != 64 && MODRM_MOD(inp_peek(u)) != 0x3) {
+    index = 0;
+  } else {
+    u->vex_op = inp_curr(u);
+    u->vex_b1 = inp_next(u);
+    if (u->vex_op == 0xc4) {
+      uint8_t pp, m;
+      /* 3-byte vex */
+      u->vex_b2 = inp_next(u);
+      UD_RETURN_ON_ERROR(u);
+      m  = u->vex_b1 & 0x1f;
+      if (m == 0 || m > 3) {
+        UD_RETURN_WITH_ERROR(u, "reserved vex.m-mmmm value");
+      }
+      pp = u->vex_b2 & 0x3;
+      index = (pp << 2) | m;
+    } else {
+      /* 2-byte vex */
+      UD_ASSERT(u->vex_op == 0xc5);
+      index = 0x1 | ((u->vex_b1 & 0x3) << 2);
+    }
+  }
+  return decode_ext(u, u->le->table[index]); 
+}
+
+
 /*
  * decode_ext()
  *
@@ -1041,6 +1192,17 @@ decode_ext(struct ud *u, uint16_t ptr)
       break;
     case UD_TAB__OPC_SSE:
       return decode_ssepfx(u);
+    case UD_TAB__OPC_VEX:
+      return decode_vex(u);
+    case UD_TAB__OPC_VEX_W:
+      idx = vex_w(u);
+      break;
+    case UD_TAB__OPC_VEX_L:
+      idx = vex_l(u);
+      break;
+    case UD_TAB__OPC_TABLE:
+      inp_next(u);
+      return decode_opcode(u);
     default:
       UD_ASSERT(!"not reached");
       break;
@@ -1056,15 +1218,7 @@ decode_opcode(struct ud *u)
   uint16_t ptr;
   UD_ASSERT(u->le->type == UD_TAB__OPC_TABLE);
   UD_RETURN_ON_ERROR(u);
-  u->primary_opcode = inp_curr(u);
   ptr = u->le->table[inp_curr(u)];
-  if (ptr & 0x8000) {
-    u->le = &ud_lookup_table_list[ptr & ~0x8000];
-    if (u->le->type == UD_TAB__OPC_TABLE) {
-      inp_next(u);
-      return decode_opcode(u);
-    }
-  }
   return decode_ext(u, ptr);
 }
 
diff --git a/libudis86/decode.h b/libudis86/decode.h
index a7362c8..3949c4e 100644
--- a/libudis86/decode.h
+++ b/libudis86/decode.h
@@ -27,38 +27,45 @@
 #define UD_DECODE_H
 
 #include "types.h"
+#include "udint.h"
 #include "itab.h"
 
 #define MAX_INSN_LENGTH 15
 
 /* itab prefix bits */
 #define P_none          ( 0 )
-#define P_cast          ( 1 << 0 )
-#define P_CAST(n)       ( ( n >> 0 ) & 1 )
-#define P_rexb          ( 1 << 1 )
-#define P_REXB(n)       ( ( n >> 1 ) & 1 )
-#define P_inv64         ( 1 << 4 )
-#define P_INV64(n)      ( ( n >> 4 ) & 1 )
+
+#define P_inv64         ( 1 << 0 )
+#define P_INV64(n)      ( ( n >> 0 ) & 1 )
+#define P_def64         ( 1 << 1 )
+#define P_DEF64(n)      ( ( n >> 1 ) & 1 )
+
+#define P_oso           ( 1 << 2 )
+#define P_OSO(n)        ( ( n >> 2 ) & 1 )
+#define P_aso           ( 1 << 3 )
+#define P_ASO(n)        ( ( n >> 3 ) & 1 )
+
+#define P_rexb          ( 1 << 4 )
+#define P_REXB(n)       ( ( n >> 4 ) & 1 )
 #define P_rexw          ( 1 << 5 )
 #define P_REXW(n)       ( ( n >> 5 ) & 1 )
-#define P_def64         ( 1 << 7 )
-#define P_DEF64(n)      ( ( n >> 7 ) & 1 )
-#define P_rexr          ( 1 << 8 )
-#define P_REXR(n)       ( ( n >> 8 ) & 1 )
-#define P_oso           ( 1 << 9 )
-#define P_OSO(n)        ( ( n >> 9 ) & 1 )
-#define P_aso           ( 1 << 10 )
-#define P_ASO(n)        ( ( n >> 10 ) & 1 )
-#define P_rexx          ( 1 << 11 )
-#define P_REXX(n)       ( ( n >> 11 ) & 1 )
-#define P_ImpAddr       ( 1 << 12 )
-#define P_IMPADDR(n)    ( ( n >> 12 ) & 1 )
-#define P_seg           ( 1 << 13 )
-#define P_SEG(n)        ( ( n >> 13 ) & 1 )
-#define P_str           ( 1 << 14 )
-#define P_STR(n)        ( ( n >> 14 ) & 1 )
-#define P_strz          ( 1 << 15 )
-#define P_STR_ZF(n)     ( ( n >> 15 ) & 1 )
+#define P_rexr          ( 1 << 6 )
+#define P_REXR(n)       ( ( n >> 6 ) & 1 )
+#define P_rexx          ( 1 << 7 )
+#define P_REXX(n)       ( ( n >> 7 ) & 1 )
+
+#define P_seg           ( 1 << 8 )
+#define P_SEG(n)        ( ( n >> 8 ) & 1 )
+
+#define P_vexl          ( 1 << 9 )
+#define P_VEXL(n)       ( ( n >> 9 ) & 1 )
+#define P_vexw          ( 1 << 10 )
+#define P_VEXW(n)       ( ( n >> 10 ) & 1 )
+
+#define P_str           ( 1 << 11 )
+#define P_STR(n)        ( ( n >> 11 ) & 1 )
+#define P_strz          ( 1 << 12 )
+#define P_STR_ZF(n)     ( ( n >> 12 ) & 1 )
 
 /* operand type constants -- order is important! */
 
@@ -86,7 +93,8 @@ enum ud_operand_code {
     OP_I1,     OP_I3,     OP_sI,
 
     OP_V,      OP_W,      OP_Q,       OP_P, 
-    OP_U,      OP_N,      OP_MU,
+    OP_U,      OP_N,      OP_MU,      OP_H,
+    OP_L,
 
     OP_R,      OP_C,      OP_D,       
 
@@ -94,57 +102,58 @@ enum ud_operand_code {
 } UD_ATTR_PACKED;
 
 
-/* operand size constants */
-
-enum ud_operand_size {
-    SZ_NA  = 0,
-    SZ_Z   = 1,
-    SZ_V   = 2,
-    SZ_RDQ = 7,
-
-    /* the following values are used as is,
-     * and thus hard-coded. changing them 
-     * will break internals 
-     */
-    SZ_B   = 8,
-    SZ_W   = 16,
-    SZ_D   = 32,
-    SZ_Q   = 64,
-    SZ_T   = 80,
-    SZ_O   = 128,
-
-    SZ_Y   = 17,
-
-    /*
-     * complex size types, that encode sizes for operands
-     * of type MR (memory or register), for internal use
-     * only. Id space 256 and above.
-     */
-    SZ_BD  = (SZ_B << 8) | SZ_D,
-    SZ_BV  = (SZ_B << 8) | SZ_V,
-    SZ_WD  = (SZ_W << 8) | SZ_D,
-    SZ_WV  = (SZ_W << 8) | SZ_V,
-    SZ_WY  = (SZ_W << 8) | SZ_Y,
-    SZ_DY  = (SZ_D << 8) | SZ_Y,
-    SZ_WO  = (SZ_W << 8) | SZ_O,
-    SZ_DO  = (SZ_D << 8) | SZ_O,
-    SZ_QO  = (SZ_Q << 8) | SZ_O,
-
-} UD_ATTR_PACKED;
+/*
+ * Operand size constants
+ *
+ *  Symbolic constants for various operand sizes. Some of these constants
+ *  are given a value equal to the width of the data (SZ_B == 8), such
+ *  that they maybe used interchangeably in the internals. Modifying them
+ *  will most certainly break things!
+ */
+typedef uint16_t ud_operand_size_t;
+
+#define SZ_NA  0
+#define SZ_Z   1
+#define SZ_V   2
+#define SZ_Y   3
+#define SZ_X   4
+#define SZ_RDQ 7
+#define SZ_B   8
+#define SZ_W   16
+#define SZ_D   32
+#define SZ_Q   64
+#define SZ_T   80
+#define SZ_O   12
+#define SZ_DQ  128 /* double quad */
+#define SZ_QQ  256 /* quad quad */
+
+/*
+ * Complex size types; that encode sizes for operands of type MR (memory or
+ * register); for internal use only. Id space above 256.
+ */
+#define SZ_BD  ((SZ_B << 8) | SZ_D)
+#define SZ_BV  ((SZ_B << 8) | SZ_V)
+#define SZ_WD  ((SZ_W << 8) | SZ_D)
+#define SZ_WV  ((SZ_W << 8) | SZ_V)
+#define SZ_WY  ((SZ_W << 8) | SZ_Y)
+#define SZ_DY  ((SZ_D << 8) | SZ_Y)
+#define SZ_WO  ((SZ_W << 8) | SZ_O)
+#define SZ_DO  ((SZ_D << 8) | SZ_O)
+#define SZ_QO  ((SZ_Q << 8) | SZ_O)
 
 
 /* resolve complex size type.
  */
-static inline enum ud_operand_size
-Mx_mem_size(enum ud_operand_size size)
+static UD_INLINE ud_operand_size_t
+Mx_mem_size(ud_operand_size_t size)
 {
-    return (size >> 8) & 0xff;
+  return (size >> 8) & 0xff;
 }
 
-static inline enum ud_operand_size
-Mx_reg_size(enum ud_operand_size size)
+static UD_INLINE ud_operand_size_t
+Mx_reg_size(ud_operand_size_t size)
 {
-    return size & 0xff;
+  return size & 0xff;
 }
 
 /* A single operand of an entry in the instruction table. 
@@ -153,7 +162,7 @@ Mx_reg_size(enum ud_operand_size size)
 struct ud_itab_entry_operand 
 {
   enum ud_operand_code type;
-  enum ud_operand_size size;
+  ud_operand_size_t size;
 };
 
 
@@ -166,6 +175,7 @@ struct ud_itab_entry
   struct ud_itab_entry_operand  operand1;
   struct ud_itab_entry_operand  operand2;
   struct ud_itab_entry_operand  operand3;
+  struct ud_itab_entry_operand  operand4;
   uint32_t                      prefix;
 };
 
@@ -175,14 +185,6 @@ struct ud_lookup_table_list_entry {
     const char *meta;
 };
      
-
-
-static inline int
-ud_opcode_field_sext(uint8_t primary_opcode)
-{
-  return (primary_opcode & 0x02) != 0;
-}
-
 extern struct ud_itab_entry ud_itab[];
 extern struct ud_lookup_table_list_entry ud_lookup_table_list[];
 
diff --git a/libudis86/extern.h b/libudis86/extern.h
index ae9f82f..71a01fd 100644
--- a/libudis86/extern.h
+++ b/libudis86/extern.h
@@ -32,67 +32,75 @@ extern "C" {
 
 #include "types.h"
 
+#if defined(_MSC_VER) && defined(_USRDLL)
+# ifdef LIBUDIS86_EXPORTS
+#  define LIBUDIS86_DLLEXTERN __declspec(dllexport)
+# else 
+#  define LIBUDIS86_DLLEXTERN __declspec(dllimport)
+# endif
+#else
+# define LIBUDIS86_DLLEXTERN 
+#endif
+
 /* ============================= PUBLIC API ================================= */
 
-extern void ud_init(struct ud*);
+extern LIBUDIS86_DLLEXTERN void ud_init(struct ud*);
 
-extern void ud_set_mode(struct ud*, uint8_t);
+extern LIBUDIS86_DLLEXTERN void ud_set_mode(struct ud*, uint8_t);
 
-extern void ud_set_pc(struct ud*, uint64_t);
+extern LIBUDIS86_DLLEXTERN void ud_set_pc(struct ud*, uint64_t);
 
-extern void ud_set_input_hook(struct ud*, int (*)(struct ud*));
+extern LIBUDIS86_DLLEXTERN void ud_set_input_hook(struct ud*, int (*)(struct ud*));
 
-extern void ud_set_input_buffer(struct ud*, const uint8_t*, size_t);
+extern LIBUDIS86_DLLEXTERN void ud_set_input_buffer(struct ud*, const uint8_t*, size_t);
 
 #ifndef __UD_STANDALONE__
-extern void ud_set_input_file(struct ud*, FILE*);
+extern LIBUDIS86_DLLEXTERN void ud_set_input_file(struct ud*, FILE*);
 #endif /* __UD_STANDALONE__ */
 
-extern void ud_set_vendor(struct ud*, unsigned);
-
-extern void ud_set_syntax(struct ud*, void (*)(struct ud*));
+extern LIBUDIS86_DLLEXTERN void ud_set_vendor(struct ud*, unsigned);
 
-extern void ud_input_skip(struct ud*, size_t);
+extern LIBUDIS86_DLLEXTERN void ud_set_syntax(struct ud*, void (*)(struct ud*));
 
-extern int ud_input_end(const struct ud*);
+extern LIBUDIS86_DLLEXTERN void ud_input_skip(struct ud*, size_t);
 
-extern unsigned int ud_decode(struct ud*);
+extern LIBUDIS86_DLLEXTERN int ud_input_end(const struct ud*);
 
-extern unsigned int ud_disassemble(struct ud*);
+extern LIBUDIS86_DLLEXTERN unsigned int ud_decode(struct ud*);
 
-extern void ud_translate_intel(struct ud*);
+extern LIBUDIS86_DLLEXTERN unsigned int ud_disassemble(struct ud*);
 
-extern void ud_translate_att(struct ud*);
+extern LIBUDIS86_DLLEXTERN void ud_translate_intel(struct ud*);
 
-extern const char* ud_insn_asm(const struct ud* u);
+extern LIBUDIS86_DLLEXTERN void ud_translate_att(struct ud*);
 
-extern const uint8_t* ud_insn_ptr(const struct ud* u);
+extern LIBUDIS86_DLLEXTERN const char* ud_insn_asm(const struct ud* u);
 
-extern uint64_t ud_insn_off(const struct ud*);
+extern LIBUDIS86_DLLEXTERN const uint8_t* ud_insn_ptr(const struct ud* u);
 
-extern const char* ud_insn_hex(struct ud*);
+extern LIBUDIS86_DLLEXTERN uint64_t ud_insn_off(const struct ud*);
 
-extern unsigned int ud_insn_len(const struct ud* u);
+extern LIBUDIS86_DLLEXTERN const char* ud_insn_hex(struct ud*);
 
-extern const struct ud_operand* ud_insn_opr(const struct ud *u, unsigned int n);
+extern LIBUDIS86_DLLEXTERN unsigned int ud_insn_len(const struct ud* u);
 
-extern int ud_opr_is_sreg(const struct ud_operand *opr);
+extern LIBUDIS86_DLLEXTERN const struct ud_operand* ud_insn_opr(const struct ud *u, unsigned int n);
 
-extern int ud_opr_is_gpr(const struct ud_operand *opr);
+extern LIBUDIS86_DLLEXTERN int ud_opr_is_sreg(const struct ud_operand *opr);
 
-extern enum ud_mnemonic_code ud_insn_mnemonic(const struct ud *u);
+extern LIBUDIS86_DLLEXTERN int ud_opr_is_gpr(const struct ud_operand *opr);
 
-extern const char* ud_lookup_mnemonic(enum ud_mnemonic_code c);
+extern LIBUDIS86_DLLEXTERN enum ud_mnemonic_code ud_insn_mnemonic(const struct ud *u);
 
-extern void ud_set_user_opaque_data(struct ud*, void*);
+extern LIBUDIS86_DLLEXTERN const char* ud_lookup_mnemonic(enum ud_mnemonic_code c);
 
-extern void* ud_get_user_opaque_data(const struct ud*);
+extern LIBUDIS86_DLLEXTERN void ud_set_user_opaque_data(struct ud*, void*);
 
-extern uint64_t ud_insn_sext_imm(const struct ud*, const struct ud_operand*);
+extern LIBUDIS86_DLLEXTERN void* ud_get_user_opaque_data(const struct ud*);
 
-extern void ud_set_asm_buffer(struct ud *u, char *buf, size_t size);
+extern LIBUDIS86_DLLEXTERN void ud_set_asm_buffer(struct ud *u, char *buf, size_t size);
 
-extern void ud_set_sym_resolver(struct ud *u, 
+extern LIBUDIS86_DLLEXTERN void ud_set_sym_resolver(struct ud *u, 
                                 const char* (*resolver)(struct ud*, 
                                                         uint64_t addr,
                                                         int64_t *offset));
diff --git a/libudis86/syn-att.c b/libudis86/syn-att.c
index dc9d739..d1ba89b 100644
--- a/libudis86/syn-att.c
+++ b/libudis86/syn-att.c
@@ -157,7 +157,7 @@ ud_translate_att(struct ud *u)
     ud_asmprintf(u,  "lock ");
   if (u->pfx_rep) {
     ud_asmprintf(u, "rep ");
-  } else if (u->pfx_rep) {
+  } else if (u->pfx_repe) {
     ud_asmprintf(u, "repe ");
   } else if (u->pfx_repne) {
     ud_asmprintf(u, "repne ");
@@ -192,12 +192,13 @@ ud_translate_att(struct ud *u)
     ud_asmprintf(u, "%s", ud_lookup_mnemonic(u->mnemonic));
   }
 
-  if (size == 8)
-  ud_asmprintf(u, "b");
-  else if (size == 16)
-  ud_asmprintf(u, "w");
-  else if (size == 64)
-  ud_asmprintf(u, "q");
+  if (size == 8) {
+    ud_asmprintf(u, "b");
+  } else if (size == 16) {
+    ud_asmprintf(u, "w");
+  } else if (size == 64) {
+    ud_asmprintf(u, "q");
+  }
 
   if (star) {
     ud_asmprintf(u, " *");
@@ -205,18 +206,21 @@ ud_translate_att(struct ud *u)
     ud_asmprintf(u, " ");
   }
 
+  if (u->operand[3].type != UD_NONE) {
+    gen_operand(u, &u->operand[3]);
+    ud_asmprintf(u, ", ");
+  }
   if (u->operand[2].type != UD_NONE) {
-  gen_operand(u, &u->operand[2]);
-  ud_asmprintf(u, ", ");
+    gen_operand(u, &u->operand[2]);
+    ud_asmprintf(u, ", ");
   }
-
   if (u->operand[1].type != UD_NONE) {
-  gen_operand(u, &u->operand[1]);
-  ud_asmprintf(u, ", ");
+    gen_operand(u, &u->operand[1]);
+    ud_asmprintf(u, ", ");
+  }
+  if (u->operand[0].type != UD_NONE) {
+    gen_operand(u, &u->operand[0]);
   }
-
-  if (u->operand[0].type != UD_NONE)
-  gen_operand(u, &u->operand[0]);
 }
 
 /*
diff --git a/libudis86/syn-intel.c b/libudis86/syn-intel.c
index e4d8409..0664fea 100644
--- a/libudis86/syn-intel.c
+++ b/libudis86/syn-intel.c
@@ -41,11 +41,13 @@ opr_cast(struct ud* u, struct ud_operand* op)
     ud_asmprintf(u, "far "); 
   }
   switch(op->size) {
-  case  8: ud_asmprintf(u, "byte " ); break;
-  case 16: ud_asmprintf(u, "word " ); break;
-  case 32: ud_asmprintf(u, "dword "); break;
-  case 64: ud_asmprintf(u, "qword "); break;
-  case 80: ud_asmprintf(u, "tword "); break;
+  case  8:  ud_asmprintf(u, "byte " ); break;
+  case 16:  ud_asmprintf(u, "word " ); break;
+  case 32:  ud_asmprintf(u, "dword "); break;
+  case 64:  ud_asmprintf(u, "qword "); break;
+  case 80:  ud_asmprintf(u, "tword "); break;
+  case 128: ud_asmprintf(u, "oword "); break;
+  case 256: ud_asmprintf(u, "yword "); break;
   default: break;
   }
 }
@@ -169,8 +171,7 @@ ud_translate_intel(struct ud* u)
       if (u->operand[1].type == UD_OP_IMM   ||
           u->operand[1].type == UD_OP_CONST ||
           u->operand[1].type == UD_NONE     ||
-          (u->operand[0].size != u->operand[1].size && 
-           u->operand[1].type != UD_OP_REG)) {
+          (u->operand[0].size != u->operand[1].size)) {
           cast = 1;
       } else if (u->operand[1].type == UD_OP_REG &&
                  u->operand[1].base == UD_R_CL) {
@@ -203,8 +204,18 @@ ud_translate_intel(struct ud* u)
   }
 
   if (u->operand[2].type != UD_NONE) {
+    int cast = 0;
+    ud_asmprintf(u, ", ");
+    if (u->operand[2].type == UD_OP_MEM &&
+        u->operand[2].size != u->operand[1].size) {
+      cast = 1;
+    }
+    gen_operand(u, &u->operand[2], cast);
+  }
+
+  if (u->operand[3].type != UD_NONE) {
     ud_asmprintf(u, ", ");
-    gen_operand(u, &u->operand[2], 0);
+    gen_operand(u, &u->operand[3], 0);
   }
 }
 
diff --git a/libudis86/syn.c b/libudis86/syn.c
index 5c54cfb..1b9e1d4 100644
--- a/libudis86/syn.c
+++ b/libudis86/syn.c
@@ -28,56 +28,61 @@
 #include "syn.h"
 #include "udint.h"
 
-/* -----------------------------------------------------------------------------
- * Intel Register Table - Order Matters (types.h)!
- * -----------------------------------------------------------------------------
+/* 
+ * Register Table - Order Matters (types.h)!
+ *
  */
 const char* ud_reg_tab[] = 
 {
   "al",   "cl",   "dl",   "bl",
   "ah",   "ch",   "dh",   "bh",
-  "spl",  "bpl",    "sil",    "dil",
-  "r8b",  "r9b",    "r10b",   "r11b",
-  "r12b", "r13b",   "r14b",   "r15b",
+  "spl",  "bpl",  "sil",  "dil",
+  "r8b",  "r9b",  "r10b", "r11b",
+  "r12b", "r13b", "r14b", "r15b",
 
   "ax",   "cx",   "dx",   "bx",
   "sp",   "bp",   "si",   "di",
-  "r8w",  "r9w",    "r10w",   "r11w",
-  "r12w", "r13w"  , "r14w",   "r15w",
+  "r8w",  "r9w",  "r10w", "r11w",
+  "r12w", "r13w", "r14w", "r15w",
   
-  "eax",  "ecx",    "edx",    "ebx",
-  "esp",  "ebp",    "esi",    "edi",
-  "r8d",  "r9d",    "r10d",   "r11d",
-  "r12d", "r13d",   "r14d",   "r15d",
+  "eax",  "ecx",  "edx",  "ebx",
+  "esp",  "ebp",  "esi",  "edi",
+  "r8d",  "r9d",  "r10d", "r11d",
+  "r12d", "r13d", "r14d", "r15d",
   
-  "rax",  "rcx",    "rdx",    "rbx",
-  "rsp",  "rbp",    "rsi",    "rdi",
-  "r8",   "r9",   "r10",    "r11",
-  "r12",  "r13",    "r14",    "r15",
+  "rax",  "rcx",  "rdx",  "rbx",
+  "rsp",  "rbp",  "rsi",  "rdi",
+  "r8",   "r9",   "r10",  "r11",
+  "r12",  "r13",  "r14",  "r15",
 
   "es",   "cs",   "ss",   "ds",
   "fs",   "gs", 
 
-  "cr0",  "cr1",    "cr2",    "cr3",
-  "cr4",  "cr5",    "cr6",    "cr7",
-  "cr8",  "cr9",    "cr10",   "cr11",
-  "cr12", "cr13",   "cr14",   "cr15",
+  "cr0",  "cr1",  "cr2",  "cr3",
+  "cr4",  "cr5",  "cr6",  "cr7",
+  "cr8",  "cr9",  "cr10", "cr11",
+  "cr12", "cr13", "cr14", "cr15",
   
-  "dr0",  "dr1",    "dr2",    "dr3",
-  "dr4",  "dr5",    "dr6",    "dr7",
-  "dr8",  "dr9",    "dr10",   "dr11",
-  "dr12", "dr13",   "dr14",   "dr15",
-
-  "mm0",  "mm1",    "mm2",    "mm3",
-  "mm4",  "mm5",    "mm6",    "mm7",
-
-  "st0",  "st1",    "st2",    "st3",
-  "st4",  "st5",    "st6",    "st7", 
-
-  "xmm0", "xmm1",   "xmm2",   "xmm3",
-  "xmm4", "xmm5",   "xmm6",   "xmm7",
-  "xmm8", "xmm9",   "xmm10",  "xmm11",
-  "xmm12",  "xmm13",  "xmm14",  "xmm15",
+  "dr0",  "dr1",  "dr2",  "dr3",
+  "dr4",  "dr5",  "dr6",  "dr7",
+  "dr8",  "dr9",  "dr10", "dr11",
+  "dr12", "dr13", "dr14", "dr15",
+
+  "mm0",  "mm1",  "mm2",  "mm3",
+  "mm4",  "mm5",  "mm6",  "mm7",
+
+  "st0",  "st1",  "st2",  "st3",
+  "st4",  "st5",  "st6",  "st7", 
+
+  "xmm0", "xmm1", "xmm2", "xmm3",
+  "xmm4", "xmm5", "xmm6", "xmm7",
+  "xmm8", "xmm9", "xmm10", "xmm11",
+  "xmm12", "xmm13", "xmm14", "xmm15",
+
+  "ymm0", "ymm1", "ymm2",   "ymm3",
+  "ymm4", "ymm5", "ymm6",   "ymm7",
+  "ymm8", "ymm9", "ymm10",  "ymm11",
+  "ymm12", "ymm13", "ymm14", "ymm15",
 
   "rip"
 };
diff --git a/libudis86/types.h b/libudis86/types.h
index 8b012a9..69072ca 100644
--- a/libudis86/types.h
+++ b/libudis86/types.h
@@ -27,24 +27,22 @@
 #define UD_TYPES_H
 
 #ifdef __KERNEL__
-  /* -D__KERNEL__ is automatically passed on the command line when
-     building something as part of the Linux kernel */
+  /* 
+   * -D__KERNEL__ is automatically passed on the command line when
+   * building something as part of the Linux kernel. Assume standalone
+   * mode.
+   */
 # include <linux/kernel.h>
 # include <linux/string.h>
 # ifndef __UD_STANDALONE__
 #  define __UD_STANDALONE__ 1
-#endif
+# endif
 #endif /* __KERNEL__ */
 
-#if defined(_MSC_VER) || defined(__BORLANDC__)
+#if !defined(__UD_STANDALONE__)
 # include <stdint.h>
 # include <stdio.h>
-# define inline __inline /* MS Visual Studio requires __inline 
-                            instead of inline for C code */
-#elif !defined(__UD_STANDALONE__)
-# include <stdio.h>
-# include <inttypes.h>
-#endif /* !__UD_STANDALONE__ */
+#endif
 
 /* gcc specific extensions */
 #ifdef __GNUC__
@@ -117,6 +115,12 @@ enum ud_type
   UD_R_XMM8,  UD_R_XMM9,  UD_R_XMM10, UD_R_XMM11,
   UD_R_XMM12, UD_R_XMM13, UD_R_XMM14, UD_R_XMM15,
 
+  /* 256B multimedia registers */
+  UD_R_YMM0,  UD_R_YMM1,  UD_R_YMM2,  UD_R_YMM3,
+  UD_R_YMM4,  UD_R_YMM5,  UD_R_YMM6,  UD_R_YMM7,
+  UD_R_YMM8,  UD_R_YMM9,  UD_R_YMM10, UD_R_YMM11,
+  UD_R_YMM12, UD_R_YMM13, UD_R_YMM14, UD_R_YMM15,
+
   UD_R_RIP,
 
   /* Operand Types */
@@ -147,7 +151,7 @@ union ud_lval {
  */
 struct ud_operand {
   enum ud_type    type;
-  uint8_t         size;
+  uint16_t        size;
   enum ud_type    base;
   enum ud_type    index;
   uint8_t         scale;  
@@ -180,6 +184,7 @@ struct ud
   size_t    inp_ctr;
   uint8_t   inp_sess[64];
   int       inp_end;
+  int       inp_peek;
 
   void      (*translator)(struct ud*);
   uint64_t  insn_offset;
@@ -202,8 +207,9 @@ struct ud
   uint64_t  pc;
   uint8_t   vendor;
   enum ud_mnemonic_code mnemonic;
-  struct ud_operand operand[3];
+  struct ud_operand operand[4];
   uint8_t   error;
+  uint8_t   _rex;
   uint8_t   pfx_rex;
   uint8_t   pfx_seg;
   uint8_t   pfx_opr;
@@ -219,6 +225,10 @@ struct ud
   uint8_t   br_near;
   uint8_t   have_modrm;
   uint8_t   modrm;
+  uint8_t   modrm_offset;
+  uint8_t   vex_op;
+  uint8_t   vex_b1;
+  uint8_t   vex_b2;
   uint8_t   primary_opcode;
   void *    user_opaque_data;
   struct ud_itab_entry * itab_entry;
diff --git a/libudis86/udint.h b/libudis86/udint.h
index 2908b61..734f0ea 100644
--- a/libudis86/udint.h
+++ b/libudis86/udint.h
@@ -26,6 +26,8 @@
 #ifndef _UDINT_H_
 #define _UDINT_H_
 
+#include "types.h"
+
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif /* HAVE_CONFIG_H */
@@ -86,4 +88,12 @@
 # endif /* !x64 */
 #endif
 
+/* define an inline macro */
+#if defined(_MSC_VER) || defined(__BORLANDC__)
+# define UD_INLINE __inline /* MS Visual Studio requires __inline
+                               instead of inline for C code */
+#else
+# define UD_INLINE inline
+#endif
+
 #endif /* _UDINT_H_ */
diff --git a/libudis86/udis86.c b/libudis86/udis86.c
index d62af1f..e039c4e 100644
--- a/libudis86/udis86.c
+++ b/libudis86/udis86.c
@@ -214,7 +214,7 @@ ud_insn_len(const struct ud* u)
 const struct ud_operand*
 ud_insn_opr(const struct ud *u, unsigned int n)
 {
-  if (n > 2 || u->operand[n].type == UD_NONE) {
+  if (n > 3 || u->operand[n].type == UD_NONE) {
     return NULL; 
   } else {
     return &u->operand[n];
@@ -355,6 +355,7 @@ ud_inp_init(struct ud *u)
   u->inp_curr      = 0;
   u->inp_ctr       = 0;
   u->inp_end       = 0;
+  u->inp_peek      = UD_EOI;
   UD_NON_STANDALONE(u->inp_file = NULL);
 }
 
diff --git a/scripts/Makefile.am b/scripts/Makefile.am
index 674d2d2..2996a6c 100644
--- a/scripts/Makefile.am
+++ b/scripts/Makefile.am
@@ -1,10 +1,9 @@
 EXTRA_DIST = \
-    ud_opcode.py \
-    ud_optable.py \
+	ud_opcode.py \
 	ud_itab.py
 
 MAINTAINERCLEANFILES = Makefile.in
 
 clean-local:
-	-rm -f *.pyc	
+	-rm -f *.pyc
 	-rm -f ud_asmtest*
diff --git a/scripts/asmtest.sh b/scripts/asmtest.sh
new file mode 100755
index 0000000..4406cea
--- /dev/null
+++ b/scripts/asmtest.sh
@@ -0,0 +1,38 @@
+#!/usr/bin/env bash
+
+objdump="otool -tV"
+yasm=yasm
+asmfile="ud_yasmtest.asm"
+binfile="ud_yasmtest.bin"
+Sfile="ud_yasmtest.S"
+objfile="ud_yasmtest.o"
+
+echo "[bits $1]" > $asmfile
+echo $2 >> $asmfile 
+
+$yasm -f bin -o $binfile $asmfile
+
+if [ ! $? -eq 0 ]; then
+    echo "error: failed to assemble"
+    exit 1
+fi
+
+echo "-- hexdump --------------------------------------"
+hexdump $binfile
+echo
+
+echo "-- objdump --------------------------------------"
+hexdump -e '1/1 ".byte 0x%02x\n"' $binfile > $Sfile
+gcc -c $Sfile -o $objfile
+$objdump -d $objfile
+echo
+
+echo "-- udcli (intel) ---------------------------------"
+../udcli/udcli -$1 $binfile
+echo
+
+echo "-- udcli (at&t) ----------------------------------"
+../udcli/udcli -$1 -att $binfile
+echo
+
+exit 0
diff --git a/scripts/ud_itab.py b/scripts/ud_itab.py
index b17fe69..31d859e 100644
--- a/scripts/ud_itab.py
+++ b/scripts/ud_itab.py
@@ -25,10 +25,9 @@
 
 import os
 import sys
-import ud_optable
-import ud_opcode
+from ud_opcode import UdOpcodeTable, UdOpcodeTables, UdInsnDef
 
-class UdItabGenerator( ud_opcode.UdOpcodeTables ):
+class UdItabGenerator:
 
     OperandDict = {
         "Av"       : [    "OP_A"        , "SZ_V"     ],
@@ -55,6 +54,7 @@ class UdItabGenerator( ud_opcode.UdOpcodeTables ):
         "Ms"       : [    "OP_M"        , "SZ_W"     ],
         "Md"       : [    "OP_M"        , "SZ_D"     ],
         "Mq"       : [    "OP_M"        , "SZ_Q"     ],
+        "Mdq"      : [    "OP_M"        , "SZ_DQ"    ],
         "Mv"       : [    "OP_M"        , "SZ_V"     ],
         "Mt"       : [    "OP_M"        , "SZ_T"     ],
         "Mo"       : [    "OP_M"        , "SZ_O"     ],
@@ -79,16 +79,30 @@ class UdItabGenerator( ud_opcode.UdOpcodeTables ):
         "R"        : [    "OP_R"        , "SZ_RDQ"   ], 
         "C"        : [    "OP_C"        , "SZ_NA"    ],
         "D"        : [    "OP_D"        , "SZ_NA"    ],
-        "S"        : [    "OP_S"        , "SZ_NA"    ],
+        "S"        : [    "OP_S"        , "SZ_W"     ],
         "Ob"       : [    "OP_O"        , "SZ_B"     ],
         "Ow"       : [    "OP_O"        , "SZ_W"     ],
         "Ov"       : [    "OP_O"        , "SZ_V"     ],
         "U"        : [    "OP_U"        , "SZ_O"     ],
-        "V"        : [    "OP_V"        , "SZ_O"     ],
+        "Ux"       : [    "OP_U"        , "SZ_X"     ],
+        "V"        : [    "OP_V"        , "SZ_DQ"    ],
+        "Vdq"      : [    "OP_V"        , "SZ_DQ"    ],
+        "Vqq"      : [    "OP_V"        , "SZ_QQ"    ],
+        "Vsd"      : [    "OP_V"        , "SZ_Q"     ],
+        "Vx"       : [    "OP_V"        , "SZ_X"     ],
+        "H"        : [    "OP_H"        , "SZ_X"     ],
+        "Hx"       : [    "OP_H"        , "SZ_X"     ],
+        "Hqq"      : [    "OP_H"        , "SZ_QQ"    ],
+        "W"        : [    "OP_W"        , "SZ_DQ"    ],
+        "Wdq"      : [    "OP_W"        , "SZ_DQ"    ],
+        "Wqq"      : [    "OP_W"        , "SZ_QQ"    ],
+        "Wsd"      : [    "OP_W"        , "SZ_Q"     ],
+        "Wx"       : [    "OP_W"        , "SZ_X"     ],
+        "L"        : [    "OP_L"        , "SZ_O"     ],
+        "Lx"       : [    "OP_L"        , "SZ_X"     ],
         "MwU"      : [    "OP_MU"       , "SZ_WO"    ],
         "MdU"      : [    "OP_MU"       , "SZ_DO"    ],
         "MqU"      : [    "OP_MU"       , "SZ_QO"    ],
-        "W"        : [    "OP_W"        , "SZ_O"     ],
         "N"        : [    "OP_N"        , "SZ_Q"     ],
         "P"        : [    "OP_P"        , "SZ_Q"     ],
         "Q"        : [    "OP_Q"        , "SZ_Q"     ],
@@ -173,119 +187,114 @@ class UdItabGenerator( ud_opcode.UdOpcodeTables ):
         "rexb"     : "P_rexb",  
         "rexx"     : "P_rexx",  
         "rexr"     : "P_rexr",
+        "vexl"     : "P_vexl",
+        "vexw"     : "P_vexw",
         "seg"      : "P_seg",
         "inv64"    : "P_inv64", 
         "def64"    : "P_def64", 
         "cast"     : "P_cast",
     }
 
-    InvalidEntryIdx = 0 
-    InvalidEntry = { 'type'     : 'invalid', 
-                     'mnemonic' : 'invalid', 
-                     'operands' : '', 
-                     'prefixes' : '',
-                     'meta'     : '' }
-
-    Itab     = []   # instruction table
-    ItabIdx  = 1    # instruction table index
-    GtabIdx  = 0    # group table index
-    GtabMeta = []
-
-    ItabLookup = {}
-
     MnemonicAliases = ( "invalid", "3dnow", "none", "db", "pause" )
     
-    def __init__( self ):
-        # first itab entry (0) is Invalid
-        self.Itab.append( self.InvalidEntry )
-        self.MnemonicsTable.extend( self.MnemonicAliases )
-
-    def toGroupId( self, id ):
-        return 0x8000 | id
-
-    def genLookupTable( self, table, scope = '' ):
-        idxArray = [ ]
-        ( tabIdx, self.GtabIdx ) = ( self.GtabIdx, self.GtabIdx + 1 )
-        self.GtabMeta.append( { 'type' : table[ 'type' ], 'meta' : table[ 'meta' ] } )
-
-        for _idx in range( self.sizeOfTable( table[ 'type' ] ) ):
-            idx = "%02x" % _idx 
-
-            e   = self.InvalidEntry
-            i   = self.InvalidEntryIdx
-
-            if idx in table[ 'entries' ].keys():
-                e = table[ 'entries' ][ idx ]
-
-            # leaf node (insn)
-            if e[ 'type' ] == 'insn':
-                ( i, self.ItabIdx ) = ( self.ItabIdx, self.ItabIdx + 1 )
-                self.Itab.append( e )
-            elif e[ 'type' ] != 'invalid':
-                i = self.genLookupTable( e, 'static' )
-
-            idxArray.append( i )
-
-        name = "ud_itab__%s" % tabIdx
-        self.ItabLookup[ tabIdx ] = name
-
+    def __init__(self, tables):
+        self.tables = tables
+        self._insnIndexMap, i = {}, 0
+        for insn in tables.getInsnList():
+            self._insnIndexMap[insn], i = i, i + 1
+
+        self._tableIndexMap, i = {}, 0
+        for table in tables.getTableList():
+            self._tableIndexMap[table], i = i, i + 1
+
+    def getInsnIndex(self, insn):
+        assert isinstance(insn, UdInsnDef)
+        return self._insnIndexMap[insn]
+
+    def getTableIndex(self, table):
+        assert isinstance(table, UdOpcodeTable)
+        return self._tableIndexMap[table]
+
+    def getTableName(self, table):
+        return "ud_itab__%d" % self.getTableIndex(table)
+
+    def genOpcodeTable(self, table, isGlobal=False):
+        """Emit Opcode Table in C.
+        """
         self.ItabC.write( "\n" );
-        if len( scope ):
-            self.ItabC.write( scope + ' ' )
-        self.ItabC.write( "const uint16_t %s[] = {\n" % name )
-        for i in range( len( idxArray ) ):
+        if not isGlobal:
+            self.ItabC.write('static ')
+        self.ItabC.write( "const uint16_t %s[] = {\n" % self.getTableName(table))
+        for i in range(table.size()):
             if i > 0 and i % 4 == 0: 
                 self.ItabC.write( "\n" )
-            if ( i%4 == 0 ):
+            if i % 4 == 0:
                 self.ItabC.write( "  /* %2x */" % i)
-            if idxArray[ i ] >= 0x8000:
-                self.ItabC.write( "%12s," % ("GROUP(%d)" % ( ~0x8000 & idxArray[ i ] )))
-            else:
-                self.ItabC.write( "%12d," % ( idxArray[ i ] ))
+            e = table.entryAt(i)
+            if e is None:
+                self.ItabC.write("%12s," % "INVALID")
+            elif isinstance(e, UdOpcodeTable):
+                self.ItabC.write("%12s," % ("GROUP(%d)" % self.getTableIndex(e)))
+            elif isinstance(e, UdInsnDef):
+                self.ItabC.write("%12s," % self.getInsnIndex(e))
         self.ItabC.write( "\n" )
         self.ItabC.write( "};\n" )
 
-        return self.toGroupId( tabIdx )
 
-    def genLookupTableList( self ):
+    def genOpcodeTables(self):
+        tables = self.tables.getTableList()
+        for table in tables:
+            self.genOpcodeTable(table, table is self.tables.root)
+
+
+    def genOpcodeTablesLookupIndex(self):
         self.ItabC.write( "\n\n"  );
         self.ItabC.write( "struct ud_lookup_table_list_entry ud_lookup_table_list[] = {\n" )
-        for i in range( len( self.GtabMeta ) ):
-            f0 = self.ItabLookup[ i ] + ","
-            f1 = ( self.nameOfTable( self.GtabMeta[ i ][ 'type' ] ) ) + ","
-            f2 = "\"%s\"" % self.GtabMeta[ i ][ 'meta' ]
-            self.ItabC.write( "    /* %03d */ { %s %s %s },\n" % ( i, f0, f1, f2 ) )
+        for table in self.tables.getTableList():
+            f0 = self.getTableName(table) + ","
+            f1 = table.label() + ","
+            f2 = "\"%s\"" % table.meta()
+            self.ItabC.write("    /* %03d */ { %s %s %s },\n" % 
+                             (self.getTableIndex(table), f0, f1, f2))
         self.ItabC.write( "};" )
 
+
     def genInsnTable( self ):
         self.ItabC.write( "struct ud_itab_entry ud_itab[] = {\n" );
-        idx = 0
-        for e in self.Itab:
-            opr_c = [ "O_NONE", "O_NONE", "O_NONE" ]
+        for insn in self.tables.getInsnList():
+            opr_c = [ "O_NONE", "O_NONE", "O_NONE", "O_NONE" ]
             pfx_c = []
-            opr   = e[ 'operands' ]
+            opr   = insn.operands
             for i in range(len(opr)): 
                 if not (opr[i] in self.OperandDict.keys()):
                     print("error: invalid operand declaration: %s\n" % opr[i])
                 opr_c[i] = "O_" + opr[i]
-            opr = "%s %s %s" % (opr_c[0] + ",", opr_c[1] + ",", opr_c[2])
+            opr = "%s %s %s %s" % (opr_c[0] + ",", opr_c[1] + ",",
+                                   opr_c[2] + ",", opr_c[3])
 
-            for p in e['prefixes']:
+            for p in insn.prefixes:
                 if not ( p in self.PrefixDict.keys() ):
                     print("error: invalid prefix specification: %s \n" % pfx)
                 pfx_c.append( self.PrefixDict[p] )
-            if len(e['prefixes']) == 0:
+            if len(insn.prefixes) == 0:
                 pfx_c.append( "P_none" )
             pfx = "|".join( pfx_c )
 
             self.ItabC.write( "  /* %04d */ { UD_I%s %s, %s },\n" \
-                        % ( idx, e[ 'mnemonic' ] + ',', opr, pfx ) )
-            idx += 1
+                        % ( self.getInsnIndex(insn), insn.mnemonic + ',', opr, pfx ) )
         self.ItabC.write( "};\n" )
 
+   
+    def getMnemonicsList(self):
+        mnemonics = self.tables.getMnemonicsList()
+        mnemonics.extend(self.MnemonicAliases)
+        return mnemonics
+
+    def genMnemonicsList(self):
+        mnemonics = self.getMnemonicsList()
         self.ItabC.write( "\n\n"  );
-        self.ItabC.write( "const char * ud_mnemonics_str[] = {\n" )
-        self.ItabC.write( ",\n    ".join( [ "\"%s\"" % m for m in self.MnemonicsTable ] ) )
+        self.ItabC.write( "const char* ud_mnemonics_str[] = {\n    " )
+        self.ItabC.write( ",\n    ".join( [ "\"%s\"" % m for m in mnemonics ] ) )
         self.ItabC.write( "\n};\n" )
  
 
@@ -301,16 +310,16 @@ def genItabH( self, filePath ):
         # table type enumeration
         self.ItabH.write( "/* ud_table_type -- lookup table types (see decode.c) */\n" )
         self.ItabH.write( "enum ud_table_type {\n    " )
-        enum = [ self.TableInfo[ k ][ 'name' ] for k in self.TableInfo.keys() ]
+        enum = UdOpcodeTable.getLabels()
         self.ItabH.write( ",\n    ".join( enum ) )
         self.ItabH.write( "\n};\n\n" );
 
         # mnemonic enumeration
         self.ItabH.write( "/* ud_mnemonic -- mnemonic constants */\n" )
         enum  = "enum ud_mnemonic_code {\n    "
-        enum += ",\n    ".join( [ "UD_I%s" % m for m in self.MnemonicsTable ] )
+        enum += ",\n    ".join( [ "UD_I%s" % m for m in self.getMnemonicsList() ] )
         enum += ",\n    UD_MAX_MNEMONIC_CODE"
-        enum += "\n} UD_ATTR_PACKED;\n"
+        enum += "\n};\n"
         self.ItabH.write( enum )
         self.ItabH.write( "\n" )
 
@@ -321,16 +330,17 @@ def genItabH( self, filePath ):
         self.ItabH.close()
 
 
-    def genItabC( self, filePath ):
-        self.ItabC = open( filePath, "w" )
-        self.ItabC.write( "/* itab.c -- generated by udis86:scripts/ud_itab.py, do no edit" )
-        self.ItabC.write( " */\n" );
-        self.ItabC.write( "#include \"decode.h\"\n\n" );
+    def genItabC(self, filePath):
+        self.ItabC = open(filePath, "w")
+        self.ItabC.write("/* itab.c -- generated by udis86:scripts/ud_itab.py, do no edit")
+        self.ItabC.write(" */\n");
+        self.ItabC.write("#include \"decode.h\"\n\n");
 
-        self.ItabC.write( "#define GROUP(n) (0x8000 | (n))\n\n" )
+        self.ItabC.write("#define GROUP(n) (0x8000 | (n))\n")
+        self.ItabC.write("#define INVALID  %d\n\n" % self.getInsnIndex(self.tables.invalidInsn))
 
-        self.genLookupTable( self.OpcodeTable0 ) 
-        self.genLookupTableList()
+        self.genOpcodeTables() 
+        self.genOpcodeTablesLookupIndex()
 
         #
         # Macros defining short-names for operands
@@ -344,6 +354,7 @@ def genItabC( self, filePath ):
         self.ItabC.write("\n");
 
         self.genInsnTable()
+        self.genMnemonicsList()
 
         self.ItabC.close()
 
@@ -359,11 +370,10 @@ def main():
     if len(sys.argv) != 3:
         usage()
         sys.exit(1)
-        
-    generator = UdItabGenerator()
-    optableXmlParser = ud_optable.UdOptableXmlParser()
-    optableXmlParser.parse( sys.argv[ 1 ], generator.addInsnDef )
-    generator.genItab(sys.argv[2])
+    
+    tables = UdOpcodeTables(xml=sys.argv[1])
+    itab   = UdItabGenerator(tables)
+    itab.genItab(sys.argv[2])
 
 if __name__ == '__main__':
     main()
diff --git a/scripts/ud_opcode.py b/scripts/ud_opcode.py
index 70cd226..fe1833d 100644
--- a/scripts/ud_opcode.py
+++ b/scripts/ud_opcode.py
@@ -1,6 +1,6 @@
 # udis86 - scripts/ud_opcode.py
 # 
-# Copyright (c) 2009 Vivek Thampi
+# Copyright (c) 2009, 2013 Vivek Thampi
 # All rights reserved.
 # 
 # Redistribution and use in source and binary forms, with or without modification, 
@@ -23,221 +23,600 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 # SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-class UdOpcodeTables:
-
-    TableInfo = {
-        'opctbl'    : { 'name' : 'UD_TAB__OPC_TABLE',   'size' : 256 },
-        '/sse'      : { 'name' : 'UD_TAB__OPC_SSE',     'size' : 4 },
-        '/reg'      : { 'name' : 'UD_TAB__OPC_REG',     'size' : 8 },
-        '/rm'       : { 'name' : 'UD_TAB__OPC_RM',      'size' : 8 },
-        '/mod'      : { 'name' : 'UD_TAB__OPC_MOD',     'size' : 2 },
-        '/m'        : { 'name' : 'UD_TAB__OPC_MODE',    'size' : 2 },
-        '/x87'      : { 'name' : 'UD_TAB__OPC_X87',     'size' : 64 },
-        '/a'        : { 'name' : 'UD_TAB__OPC_ASIZE',   'size' : 3 },
-        '/o'        : { 'name' : 'UD_TAB__OPC_OSIZE',   'size' : 3 },
-        '/3dnow'    : { 'name' : 'UD_TAB__OPC_3DNOW',   'size' : 256 },
-        'vendor'    : { 'name' : 'UD_TAB__OPC_VENDOR',  'size' : 3 },
-        '/vex.p'    : { 'name' : 'UD_TAB__OPC_VEX_P',   'size' : 4 },
-        '/vex.m'    : { 'name' : 'UD_TAB__OPC_VEX_M',   'size' : 3 },
+import os
+
+# Some compatibility stuff for supporting python 2.x as well as python 3.x
+def itemslist(dict):
+    try:
+        return dict.iteritems() # python 2.x
+    except AttributeError:
+        return list(dict.items()) # python 3.x
+
+class UdInsnDef:
+    """An x86 instruction definition
+    """
+    def __init__(self, **insnDef):
+        self.mnemonic  = insnDef['mnemonic']
+        self.prefixes  = insnDef['prefixes']
+        self.opcodes   = insnDef['opcodes']
+        self.operands  = insnDef['operands']
+        self._cpuid    = insnDef['cpuid']
+        self._opcexts  = {}
+
+        for opc in self.opcodes:
+            if opc.startswith('/'):
+                e, v = opc.split('=')
+                self._opcexts[e] = v
+
+    def lookupPrefix(self, pfx):
+        """Lookup prefix (if any, None otherwise), by name"""
+        return True if pfx in self.prefixes else None
+
+
+    @property
+    def vendor(self):
+        return self._opcexts.get('/vendor', None)
+
+    @property
+    def mode(self):
+        return self._opcexts.get('/m', None)
+
+    @property
+    def osize(self):
+        return self._opcexts.get('/o', None)
+
+    def isDef64(self):
+        return 'def64' in self.prefixes
+
+    def __str__(self):
+        return self.mnemonic + " " + ', '.join(self.operands) + \
+               " " + ' '.join(self.opcodes)
+
+
+class UdOpcodeTable:
+    """A single table of instruction definitions, indexed by
+       a decode field. 
+    """
+
+    class CollisionError(Exception):
+        pass
+
+    class IndexError(Exception):
+        """Invalid Index Error"""
+        pass
+
+    @classmethod
+    def vendor2idx(cls, v):
+        return (0 if v == 'amd' 
+                  else (1 if v == 'intel'
+                          else 2))
+
+    @classmethod
+    def vex2idx(cls, v):
+        if v.startswith("none_"):
+            v = v[5:]
+        vexOpcExtMap = {
+            'none'      : 0x0, 
+            '0f'        : 0x1, 
+            '0f38'      : 0x2, 
+            '0f3a'      : 0x3,
+            '66'        : 0x4, 
+            '66_0f'     : 0x5, 
+            '66_0f38'   : 0x6, 
+            '66_0f3a'   : 0x7,
+            'f3'        : 0x8, 
+            'f3_0f'     : 0x9, 
+            'f3_0f38'   : 0xa, 
+            'f3_0f3a'   : 0xb,
+            'f2'        : 0xc, 
+            'f2_0f'     : 0xd, 
+            'f2_0f38'   : 0xe, 
+            'f2_0f3a'   : 0xf,
+        }
+        return vexOpcExtMap[v]
+
+
+    # A mapping of opcode extensions to their representational
+    # values used in the opcode map.
+    OpcExtMap = {
+        '/rm'    : lambda v: int(v, 16),
+        '/x87'   : lambda v: int(v, 16),
+        '/3dnow' : lambda v: int(v, 16),
+        '/reg'   : lambda v: int(v, 16),
+        # modrm.mod
+        # (!11, 11)    => (00b, 01b)
+        '/mod'   : lambda v: 0 if v == '!11' else 1,
+        # Mode extensions:
+        # (16, 32, 64) => (00, 01, 02)
+        '/o'     : lambda v: (int(v) / 32),
+        '/a'     : lambda v: (int(v) / 32),
+        # Disassembly mode 
+        # (!64, 64)    => (00b, 01b)
+        '/m'     : lambda v: 1 if v == '64' else 0,
+        # SSE
+        # none => 0
+        # f2   => 1
+        # f3   => 2
+        # 66   => 3
+        '/sse'   : lambda v: (0 if v == 'none'
+                                else (((int(v, 16) & 0xf) + 1) / 2)),
+        # AVX
+        '/vex'   : lambda v: UdOpcodeTable.vex2idx(v),
+        '/vexw'  : lambda v: 0 if v == '0' else 1,
+        '/vexl'  : lambda v: 0 if v == '0' else 1,
+        # Vendor
+        '/vendor': lambda v: UdOpcodeTable.vendor2idx(v)
     }
 
-    OpcodeTable0 = {
-        'type'      : 'opctbl',
-        'entries'   : {},
-        'meta'      : 'table0'
+
+    _TableInfo = {
+        'opctbl'    : { 'label' : 'UD_TAB__OPC_TABLE',   'size' : 256 },
+        '/sse'      : { 'label' : 'UD_TAB__OPC_SSE',     'size' : 4 },
+        '/reg'      : { 'label' : 'UD_TAB__OPC_REG',     'size' : 8 },
+        '/rm'       : { 'label' : 'UD_TAB__OPC_RM',      'size' : 8 },
+        '/mod'      : { 'label' : 'UD_TAB__OPC_MOD',     'size' : 2 },
+        '/m'        : { 'label' : 'UD_TAB__OPC_MODE',    'size' : 2 },
+        '/x87'      : { 'label' : 'UD_TAB__OPC_X87',     'size' : 64 },
+        '/a'        : { 'label' : 'UD_TAB__OPC_ASIZE',   'size' : 3 },
+        '/o'        : { 'label' : 'UD_TAB__OPC_OSIZE',   'size' : 3 },
+        '/3dnow'    : { 'label' : 'UD_TAB__OPC_3DNOW',   'size' : 256 },
+        '/vendor'   : { 'label' : 'UD_TAB__OPC_VENDOR',  'size' : 3 },
+        '/vex'      : { 'label' : 'UD_TAB__OPC_VEX',     'size' : 16 },
+        '/vexw'     : { 'label' : 'UD_TAB__OPC_VEX_W',   'size' : 2 },
+        '/vexl'     : { 'label' : 'UD_TAB__OPC_VEX_L',   'size' : 2 },
     }
 
-    OpcExtIndex = {
-
-        # ssef2, ssef3, sse66
-        'sse': {
-            'none' : '00', 
-            'f2'   : '01', 
-            'f3'   : '02', 
-            '66'   : '03'
-        },
-
-        # /mod=
-        'mod': {
-            '!11'   : '00', 
-            '11'    : '01'
-        },
-
-        # /m=, /o=, /a=
-        'mode': { 
-            '16'    : '00', 
-            '32'    : '01', 
-            '64'    : '02'
-        },
-
-        'vendor' : {
-            'amd'   : '00',
-            'intel' : '01',
-            'any'   : '02'
-        },
-
-        'vex.p': {
-            'none' : '00', 
-            'f2'   : '01', 
-            'f3'   : '02', 
-            '66'   : '03'
-        },
-
-       'vex.m': {
-            'none' : '00', 
-            '38'   : '01', 
-            '3a'   : '02', 
-        },
 
+    def __init__(self, typ):
+        assert typ in self._TableInfo
+        self._typ     = typ
+        self._entries = {}
 
-    }
 
-    InsnTable = []
-    MnemonicsTable = []
-
-    def sizeOfTable( self, t ): 
-        return self.TableInfo[ t ][ 'size' ]
-
-    def nameOfTable( self, t ): 
-        return self.TableInfo[ t ][ 'name' ]
-
-    #
-    # Updates a table entry: If the entry doesn't exist
-    # it will create the entry, otherwise, it will walk
-    # while validating the path.
-    #
-    def updateTable( self, table, index, type, meta ):
-        if not index in table[ 'entries' ]:
-            table[ 'entries' ][ index ] = { 'type' : type, 'entries' : {}, 'meta' : meta } 
-        if table[ 'entries' ][ index ][ 'type' ] != type:
-            raise NameError( "error: violation in opcode mapping (overwrite) %s with %s." % 
-                                ( table[ 'entries' ][ index ], type) )
-        return table[ 'entries' ][ index ]
-
-    class Insn:
-        """An abstract type representing an instruction in the opcode map.
-        """
+    def size(self):
+        return self._TableInfo[self._typ]['size']
 
-        # A mapping of opcode extensions to their representational
-        # values used in the opcode map.
-        OpcExtMap = {
-            '/rm'    : lambda v: "%02x" % int(v, 16),
-            '/x87'   : lambda v: "%02x" % int(v, 16),
-            '/3dnow' : lambda v: "%02x" % int(v, 16),
-            '/reg'   : lambda v: "%02x" % int(v, 16),
-            # modrm.mod
-            # (!11, 11)    => (00, 01)
-            '/mod'   : lambda v: '00' if v == '!11' else '01',
-            # Mode extensions:
-            # (16, 32, 64) => (00, 01, 02)
-            '/o'     : lambda v: "%02x" % (int(v) / 32),
-            '/a'     : lambda v: "%02x" % (int(v) / 32),
-            '/m'     : lambda v: '00' if v == '!64' else '01',
-            # SSE
-            '/sse'   : lambda v: UdOpcodeTables.OpcExtIndex['sse'][v],
-            # AVX
-            '/vex.p' : lambda v: UdOpcodeTables.OpcExtIndex['vex.p'][v],
-            '/vex.m' : lambda v: UdOpcodeTables.OpcExtIndex['vex.m'][v]
-        }
+    def entries(self):
+        return itemslist(self._entries)
 
-        def __init__(self, prefixes, mnemonic, opcodes, operands, vendor):
-            self.opcodes  = []
-            self.prefixes = prefixes
-            self.mnemonic = mnemonic
-            self.operands = operands
-            self.vendor   = vendor
-            self.opcext   = {}
-
-            # artificially add a /sse=none for 2 byte opcodes
-            if opcodes[0] == '0f' and opcodes[1] != '0f':
-                opcodes.append('/sse=none')
-
-            # begin the list with all plain opcodes
-            for opc in opcodes:
-                if not opc.startswith('/'):
-                    self.opcodes.append(opc)
-
-            # re-order vex/xop prefixes to follow vex opcode
-            if self.opcodes[0] == 'c4' or self.opcodes[0] == 'c5':
-                for opc in opcodes:
-                    if opc.startswith('/vex'):
-                        self.opcodes.insert(1, opc)
-
-            # Add extensions. The order is important, and determines how
-            # well the opcode table is packed. Also note, /sse must be
-            # before /o, because /sse may consume operand size prefix
-            # affect the outcome of /o.
-            for ext in ('/mod', '/x87', '/reg', '/rm', '/sse',
-                        '/o',   '/a',   '/m', '/3dnow'):
-                for opc in opcodes:
-                    if opc.startswith(ext):
-                        self.opcodes.append(opc)
-
-    def parse(self, table, insn):
-        # Walk down the tree, create levels as needed
-        assert not insn.opcodes[0].startswith("/")
-        index = insn.opcodes[0];
-        for opc in insn.opcodes[1:]:
-            if opc.startswith('/'):
-                ext, v= opc.split('=')
-                table = self.updateTable(table, index, ext, ext)
-                index = insn.OpcExtMap[ext](v)
-                insn.opcext[ext] = index
-            else:
-                table = self.updateTable(table, index, 'opctbl', index)
-                index = opc
-
-        # additional table for disambiguating vendor
-        if len(insn.vendor):
-            table = self.updateTable(table, index, 'vendor', insn.vendor)
-            index = self.OpcExtIndex['vendor'][insn.vendor]
-
-        # make leaf node entries
-        leaf = self.updateTable(table, index, 'insn', '')
-
-        leaf['mnemonic'] = insn.mnemonic
-        leaf['prefixes'] = insn.prefixes
-        leaf['operands'] = insn.operands
-
-        # add instruction to linear table of instruction forms
-        self.InsnTable.append({ 'prefixes' : insn.prefixes,  
-                                'mnemonic' : insn.mnemonic, 
-                                'operands' : insn.operands,
-                                'vendor'   : insn.vendor,
-                                'opcext'   : insn.opcext,
-                                'opcodes'  : insn.opcodes })
-
-        # add mnemonic to mnemonic table
-        if not insn.mnemonic in self.MnemonicsTable:
-            self.MnemonicsTable.append(insn.mnemonic)
-
-
-    # Adds an instruction definition to the opcode tables
-    def addInsnDef( self, prefixes, mnemonic, opcodes, operands, vendor ):
-        insn = self.Insn(prefixes=prefixes,
-                    mnemonic=mnemonic,
-                    opcodes=opcodes,
-                    operands=operands,
-                    vendor=vendor)
-        try: 
-            self.parse(self.OpcodeTable0, insn)
-        except:
-            self.print_tree()
-            raise
+    def numEntries(self):
+        return len(self._entries.keys())
+
+    def label(self):
+        return self._TableInfo[self._typ]['label']
+
+    def typ(self):
+        return self._typ
+
+    def meta(self):
+        return self._typ
+
+
+    def __str__(self):
+        return "table-%s" % self._typ
 
-    def print_table( self, table, pfxs ):
-        print("%s   |" % pfxs)
-        keys = table[ 'entries' ].keys()
-        if ( len( keys ) ):
-            keys.sort()
-        for idx in keys:
-            e = table[ 'entries' ][ idx ]
-            if e[ 'type' ] == 'insn':
-                print("%s   |-<%s>" % ( pfxs, idx )),
-                print("%s %s" % ( e[ 'mnemonic' ], ' '.join( e[ 'operands'] ) ))
+
+    def add(self, opc, obj):
+        typ = UdOpcodeTable.getOpcodeTyp(opc)
+        idx = UdOpcodeTable.getOpcodeIdx(opc)
+        if self._typ != typ or idx in self._entries:
+            raise CollisionError()
+        self._entries[idx] = obj
+
+
+    def lookup(self, opc):
+        typ = UdOpcodeTable.getOpcodeTyp(opc)
+        idx = UdOpcodeTable.getOpcodeIdx(opc)
+        if self._typ != typ:
+            raise UdOpcodeTable.CollisionError("%s <-> %s" % (self._typ, typ))
+        return self._entries.get(idx, None)
+
+    
+    def entryAt(self, index):
+        """Returns the entry at a given index of the table,
+           None if there is none. Raises an exception if the
+           index is out of bounds.
+        """
+        if index < self.size():
+            return self._entries.get(index, None)
+        raise self.IndexError("index out of bounds: %s" % index)
+
+    def setEntryAt(self, index, obj):
+        if index < self.size():
+            self._entries[index] = obj
+        else:
+            raise self.IndexError("index out of bounds: %s" % index)
+
+    @classmethod
+    def getOpcodeTyp(cls, opc):
+        if opc.startswith('/'):
+            return opc.split('=')[0]
+        else:
+            return 'opctbl'
+
+
+    @classmethod
+    def getOpcodeIdx(cls, opc):
+        if opc.startswith('/'):
+            typ, v = opc.split('=')
+            return cls.OpcExtMap[typ](v)
+        else:
+            # plain opctbl opcode
+            return int(opc, 16)
+
+
+    @classmethod
+    def getLabels(cls):
+        """Returns a list of all labels"""
+        return [cls._TableInfo[k]['label'] for k in cls._TableInfo.keys()]
+
+
+class UdOpcodeTables(object):
+    """Collection of opcode tables
+    """
+
+    class CollisionError(Exception):
+        def __init__(self, obj1, obj2):
+            self.obj1, self.obj2 = obj1, obj2
+
+    def newTable(self, typ):
+        """Create a new opcode table of a give type `typ`. """
+        tbl = UdOpcodeTable(typ)
+        self._tables.append(tbl)
+        return tbl
+
+    def mkTrie(self, opcodes, obj):
+        """Recursively contruct a trie entry mapping a string of
+           opcodes to an object.
+        """
+        if len(opcodes) == 0:
+            return obj
+        opc = opcodes[0]
+        tbl = self.newTable(UdOpcodeTable.getOpcodeTyp(opc))
+        tbl.add(opc, self.mkTrie(opcodes[1:], obj))
+        return tbl
+
+    def walk(self, tbl, opcodes):
+        """Walk down the opcode trie, starting at a given opcode
+           table, given a string of opcodes. Return None if unable
+           to walk, the object at the leaf otherwise.
+        """
+        opc = opcodes[0]
+        e   = tbl.lookup(opc)
+        if e is None:
+            return None
+        elif isinstance(e, UdOpcodeTable) and len(opcodes[1:]):
+            return self.walk(e, opcodes[1:])
+        return e
+
+    def map(self, tbl, opcodes, obj):
+        """Create a mapping from a given string of opcodes to an
+           object in the opcode trie. Constructs trie branches as
+           needed.
+        """
+        opc = opcodes[0]
+        e   =  tbl.lookup(opc)
+        if e is None:
+            tbl.add(opc, self.mkTrie(opcodes[1:], obj))
+        else:
+            if len(opcodes[1:]) == 0:
+                raise self.CollisionError(e, obj)
+            self.map(e, opcodes[1:], obj)
+
+    def __init__(self, xml):
+        self._tables    = []
+        self._insns     = []
+        self._mnemonics = {}
+
+        # The root table is always a 256 entry opctbl, indexed
+        # by a plain opcode byte
+        self.root       = self.newTable('opctbl')
+
+        if os.getenv("UD_OPCODE_DEBUG"):
+            self._logFh     = open("opcodeTables.log", "w")
+
+        # add an invalid instruction entry without any mapping
+        # in the opcode tables.
+        self.invalidInsn = UdInsnDef(mnemonic="invalid", opcodes=[], cpuid=[],
+                                     operands=[], prefixes=[])
+        self._insns.append(self.invalidInsn)
+
+        # Construct UdOpcodeTables object from the given
+        # udis86 optable.xml
+        for insn in self.__class__.parseOptableXML(xml):
+            self.addInsnDef(insn)
+        self.patchAvx2byte()
+        self.mergeSSENONE()
+        self.printStats()
+
+    def log(self, s):
+        if os.getenv("UD_OPCODE_DEBUG"):
+            self._logFh.write(s + "\n")
+
+
+    def mergeSSENONE(self):
+        """Merge sse tables with only one entry for /sse=none
+        """
+        for table in self._tables:
+            for k, e in table.entries():
+                if isinstance(e, UdOpcodeTable) and e.typ() == '/sse':
+                    if e.numEntries() == 1:
+                        sse = e.lookup("/sse=none")
+                        if sse:
+                            table.setEntryAt(k, sse)
+        uniqTables = {}
+        def genTableList(tbl):
+            if tbl not in uniqTables:
+                self._tables.append(tbl)
+            uniqTables[tbl] = 1
+            for k, e in tbl.entries():
+                if isinstance(e, UdOpcodeTable):
+                    genTableList(e)
+        self._tables = []
+        genTableList(self.root)
+                
+
+    def patchAvx2byte(self):
+        # create avx tables
+        for pp in (None, 'f2', 'f3', '66'):
+            for m in (None, '0f', '0f38', '0f3a'):
+                if pp is None and m is None:
+                    continue
+                if pp is None:
+                    vex = m
+                elif m is None:
+                    vex = pp
+                else:
+                    vex = pp + '_' + m
+                table = self.walk(self.root, ('c4', '/vex=' + vex))
+                self.map(self.root, ('c5', '/vex=' + vex), table)
+
+
+    def addInsn(self, **insnDef):
+
+        # Canonicalize opcode list
+        opcexts = insnDef['opcexts']
+        opcodes = list(insnDef['opcodes'])
+
+        # Re-order vex
+        if '/vex' in opcexts:
+            assert opcodes[0] == 'c4' or opcodes[0] == 'c5'
+            opcodes.insert(1, '/vex=' + opcexts['/vex'])
+
+        # Add extensions. The order is important, and determines how
+        # well the opcode table is packed. Also note, /sse must be
+        # before /o, because /sse may consume operand size prefix
+        # affect the outcome of /o.
+        for ext in ('/mod', '/x87', '/reg', '/rm', '/sse', '/o', '/a', '/m',
+                    '/vexw', '/vexl', '/3dnow', '/vendor'):
+            if ext in opcexts:
+                opcodes.append(ext + '=' + opcexts[ext])
+
+        insn = UdInsnDef(mnemonic = insnDef['mnemonic'],
+                         prefixes = insnDef['prefixes'],
+                         operands = insnDef['operands'],
+                         opcodes  = opcodes,
+                         cpuid    = insnDef['cpuid'])
+        try:
+            self.map(self.root, opcodes, insn)
+        except self.CollisionError as e:
+            self.pprint()
+            print(opcodes, insn, str(e.obj1), str(e.obj2))
+            raise
+        except Exception as e:
+            self.pprint()
+            raise
+        self._insns.append(insn)
+        # add to lookup by mnemonic structure
+        if insn.mnemonic not in self._mnemonics:
+            self._mnemonics[insn.mnemonic] = [ insn ]
+        else:
+            self._mnemonics[insn.mnemonic].append(insn)
+
+
+    def addInsnDef(self, insnDef):
+        opcodes  = []
+        opcexts  = {}
+
+        # pack plain opcodes first, and collect opcode
+        # extensions
+        for opc in insnDef['opcodes']:
+            if not opc.startswith('/'):
+                opcodes.append(opc)
             else:
-                print("%s   |-<%s> %s" % ( pfxs, idx, e['type'] ))
-                self.print_table( e, pfxs + '   |' )
+                e, v = opc.split('=')
+                opcexts[e] = v
+
+        # treat vendor as an opcode extension
+        if len(insnDef['vendor']):
+            opcexts['/vendor'] = insnDef['vendor'][0]
+
+        if insnDef['mnemonic'] in ('lds', 'les'):
+            #
+            # Massage lds and les, which share the same prefix as AVX
+            # instructions, to work well with the opcode tree.
+            #
+            opcexts['/vex'] = 'none'
+        elif '/vex' in opcexts:
+            # A proper avx instruction definition; make sure there are
+            # no legacy opcode extensions
+            assert '/sse' not in opcodes
+
+            # make sure the opcode definitions don't already include
+            # the avx prefixes.
+            assert opcodes[0] not in ('c4', 'c5')
+
+            # An avx only instruction is defined by the /vex= opcode
+            # extension. They do not include the c4 (long form) or
+            # c5 (short form) prefix. As part of opcode table generate,
+            # here we create the long form definition, and then patch
+            # the table for c5 in a later stage.
+            # Construct a long-form definition of the avx instruction
+            opcodes.insert(0, 'c4')
+        elif (opcodes[0] == '0f' and opcodes[1] != '0f' and
+            '/sse' not in opcexts):
+            # Make all 2-byte opcode form isntructions play nice with sse
+            # opcode maps.
+            opcexts['/sse'] = 'none'
+
+        # legacy sse defs that get promoted to avx
+        fn = self.addInsn
+        if 'avx' in insnDef['cpuid'] and '/sse' in opcexts:
+            fn = self.addSSE2AVXInsn
+
+        fn(mnemonic = insnDef['mnemonic'],
+           prefixes = insnDef['prefixes'],
+           opcodes  = opcodes,
+           opcexts  = opcexts,
+           operands = insnDef['operands'],
+           cpuid    = insnDef['cpuid'])
+
+
+    def addSSE2AVXInsn(self, **insnDef):
+        """Add an instruction definition containing an avx cpuid bit, but
+           declared in its legacy SSE form. The function splits the
+           definition to create two new definitions, one for SSE and one
+           promoted to an AVX form.
+        """
 
-    def print_tree( self ): 
-        self.print_table( self.OpcodeTable0, '' )
+        # SSE
+        ssemnemonic = insnDef['mnemonic']
+        sseopcodes  = insnDef['opcodes']
+        # remove vex opcode extensions
+        sseopcexts  = dict([(e, v) for e, v in itemslist(insnDef['opcexts'])
+                                  if not e.startswith('/vex')])
+        # strip out avx operands, preserving relative ordering
+        # of remaining operands
+        sseoperands = [opr for opr in insnDef['operands']
+                        if opr not in ('H', 'L')]
+        # strip out avx prefixes
+        sseprefixes = [pfx for pfx in insnDef['prefixes']
+                        if not pfx.startswith('vex')]
+        # strip out avx bits from cpuid
+        ssecpuid    = [flag for flag in insnDef['cpuid']
+                        if not flag.startswith('avx')]
+
+        self.addInsn(mnemonic = ssemnemonic,
+                     prefixes = sseprefixes,
+                     opcodes  = sseopcodes,
+                     opcexts  = sseopcexts,
+                     operands = sseoperands,
+                     cpuid    = ssecpuid)
+
+        # AVX
+        vexmnemonic = 'v' + insnDef['mnemonic']
+        vexprefixes = insnDef['prefixes']
+        vexopcodes  = ['c4']
+        vexopcexts  = dict([(e, insnDef['opcexts'][e])
+                              for e in insnDef['opcexts'] if e != '/sse'])
+        vexopcexts['/vex'] = insnDef['opcexts']['/sse'] + '_' + '0f'
+        if insnDef['opcodes'][1] == '38' or insnDef['opcodes'][1] == '3a':
+            vexopcexts['/vex'] += insnDef['opcodes'][1]
+            vexopcodes.extend(insnDef['opcodes'][2:])
+        else:
+            vexopcodes.extend(insnDef['opcodes'][1:])
+        vexoperands = []
+        for o in insnDef['operands']:
+            # make the operand size explicit: x
+            if o in ('V', 'W', 'H', 'U'):
+                o = o + 'x'
+            vexoperands.append(o)
+        vexcpuid    = [flag for flag in insnDef['cpuid']
+                        if not flag.startswith('sse')]
+
+        self.addInsn(mnemonic = vexmnemonic,
+                     prefixes = vexprefixes,
+                     opcodes  = vexopcodes,
+                     opcexts  = vexopcexts,
+                     operands = vexoperands,
+                     cpuid    = vexcpuid)
+
+    def getInsnList(self):
+        """Returns a list of all instructions in the collection"""
+        return self._insns
+
+
+    def getTableList(self):
+        """Returns a list of all tables in the collection"""
+        return self._tables
+
+    def getMnemonicsList(self):
+        """Returns a sorted list of mnemonics"""
+        return sorted(self._mnemonics.keys())
+
+
+    def pprint(self):
+        def printWalk(tbl, indent=""):
+            entries = tbl.entries()
+            for k, e in entries:
+                if isinstance(e, UdOpcodeTable):
+                    self.log("%s    |-<%02x> %s" % (indent, k, e))
+                    printWalk(e, indent + "    |")
+                elif isinstance(e, UdInsnDef):
+                    self.log("%s    |-<%02x> %s" % (indent, k, e))
+        printWalk(self.root)
+
+
+    def printStats(self):
+        tables = self.getTableList()
+        self.log("stats: ")
+        self.log("  Num tables    = %d" % len(tables))
+        self.log("  Num insnDefs  = %d" % len(self.getInsnList()))
+        self.log("  Num insns     = %d" % len(self.getMnemonicsList()))
+
+        totalSize = 0
+        totalEntries = 0
+        for table in tables:
+            totalSize += table.size()
+            totalEntries += table.numEntries()
+        self.log("  Packing Ratio = %d%%" % ((totalEntries * 100) / totalSize))
+        self.log("--------------------")
+
+        self.pprint()
+
+
+    @staticmethod
+    def parseOptableXML(xml):
+        """Parse udis86 optable.xml file and return list of
+           instruction definitions.
+        """
+        from xml.dom import minidom
+
+        xmlDoc = minidom.parse(xml)
+        tlNode = xmlDoc.firstChild
+        insns  = []
+
+        while tlNode and tlNode.localName != "x86optable": 
+            tlNode = tlNode.nextSibling
+
+        for insnNode in tlNode.childNodes:
+            if not insnNode.localName:
+                continue
+            if insnNode.localName != "instruction":
+                raise Exception("warning: invalid insn node - %s" % insnNode.localName)
+            mnemonic = insnNode.getElementsByTagName('mnemonic')[0].firstChild.data
+            vendor, cpuid = '', []
+
+            for node in insnNode.childNodes:
+                if node.localName == 'vendor':
+                    vendor = node.firstChild.data.split()
+                elif node.localName == 'cpuid':
+                    cpuid = node.firstChild.data.split()
+
+            for node in insnNode.childNodes:
+                if node.localName == 'def':
+                    insnDef = { 'pfx' : [] }
+                    for node in node.childNodes:
+                        if not node.localName:
+                            continue
+                        if node.localName in ('pfx', 'opc', 'opr', 'vendor', 'cpuid'):
+                            insnDef[node.localName] = node.firstChild.data.split()
+                        elif node.localName == 'mode':
+                            insnDef['pfx'].extend(node.firstChild.data.split())
+                    insns.append({'prefixes' : insnDef.get('pfx', []),
+                                  'mnemonic' : mnemonic,
+                                  'opcodes'  : insnDef.get('opc', []),
+                                  'operands' : insnDef.get('opr', []),
+                                  'vendor'   : insnDef.get('vendor', vendor),
+                                  'cpuid'    : insnDef.get('cpuid', cpuid)})
+        return insns
diff --git a/scripts/ud_optable.py b/scripts/ud_optable.py
deleted file mode 100644
index e9e0b53..0000000
--- a/scripts/ud_optable.py
+++ /dev/null
@@ -1,100 +0,0 @@
-# udis86 - scripts/ud_optable.py (optable.xml parser)
-# 
-# Copyright (c) 2009 Vivek Thampi
-# All rights reserved.
-# 
-# Redistribution and use in source and binary forms, with or without modification, 
-# are permitted provided that the following conditions are met:
-# 
-#     * Redistributions of source code must retain the above copyright notice, 
-#       this list of conditions and the following disclaimer.
-#     * Redistributions in binary form must reproduce the above copyright notice, 
-#       this list of conditions and the following disclaimer in the documentation 
-#       and/or other materials provided with the distribution.
-# 
-# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
-# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
-# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
-# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR 
-# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
-# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
-# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON 
-# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
-# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
-# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-import os
-import sys
-from xml.dom import minidom
-
-class UdOptableXmlParser:
-
-    def parseDef( self, node ):
-        ven = '' 
-        pfx = [] 
-        opc = [] 
-        opr = []
-        for def_node in node.childNodes:
-            if not def_node.localName:
-                continue
-            if def_node.localName == 'pfx':
-                pfx = def_node.firstChild.data.split();
-            elif def_node.localName == 'opc':
-                opc = def_node.firstChild.data.split();
-            elif def_node.localName == 'opr':
-                opr = def_node.firstChild.data.split();
-            elif def_node.localName == 'mode':
-                pfx.extend( def_node.firstChild.data.split() );
-            elif def_node.localName == 'syn':
-                pfx.extend( def_node.firstChild.data.split() );
-            elif def_node.localName == 'vendor':
-                ven = ( def_node.firstChild.data );
-        return ( pfx, opc, opr, ven )
-
-    def parse( self, xml, fn ):
-        xmlDoc = minidom.parse( xml )
-        self.TlNode = xmlDoc.firstChild
-
-        while self.TlNode and self.TlNode.localName != "x86optable": 
-            self.TlNode = self.TlNode.nextSibling
-
-        for insnNode in self.TlNode.childNodes:
-            if not insnNode.localName:
-                continue
-            if insnNode.localName != "instruction":
-                print("warning: invalid insn node - %s" % insnNode.localName)
-                continue
-
-            mnemonic = insnNode.getElementsByTagName( 'mnemonic' )[ 0 ].firstChild.data
-            vendor   = ''
-
-            for node in insnNode.childNodes:
-                if node.localName == 'vendor':
-                    vendor = node.firstChild.data
-                elif node.localName == 'def':
-                    ( prefixes, opcodes, operands, local_vendor ) = \
-                        self.parseDef( node )
-                    if ( len( local_vendor ) ):
-                        vendor = local_vendor
-                    # callback
-                    fn( prefixes, mnemonic, opcodes, operands, vendor )
-
-
-def printFn( pfx, mnm, opc, opr, ven ):
-    print('def: ',)
-    if len( pfx ):
-        print(' '.join( pfx ),)
-    print("%s %s %s %s" %
-            ( mnm, ' '.join( opc ), ' '.join( opr ), ven ))
-
-
-def parse( xml, callback ):
-    parser = UdOptableXmlParser()  
-    parser.parse( xml, callback )
-
-def main():
-    parser = UdOptableXmlParser()  
-    parser.parse( sys.argv[ 1 ], printFn )
-
-if __name__ == "__main__":
-    main() 
diff --git a/tests/Makefile.am b/tests/Makefile.am
index f7cc17b..9fab323 100644
--- a/tests/Makefile.am
+++ b/tests/Makefile.am
@@ -2,13 +2,8 @@
 # Automake definitions for udis86 tests
 #
 check_PROGRAMS = \
-    symresolve \
-    bufoverrun \
-    libcheck
-
-bufoverrun_SOURCES  = bufoverrun.c
-bufoverrun_LDADD    = $(top_builddir)/libudis86/libudis86.la
-bufoverrun_CFLAGS   = -I$(top_srcdir)/libudis86 -I$(top_srcdir)
+	symresolve \
+	libcheck
 
 symresolve_SOURCES = symresolve.c
 symresolve_LDADD   = $(top_builddir)/libudis86/libudis86.la
@@ -27,26 +22,21 @@ PYTHON  = @PYTHON@
 TESTDIS = $(top_builddir)/udcli/udcli
 
 EXTRA_DIST = \
- 	$(srcdir)/asm \
+	$(srcdir)/asm \
 	$(srcdir)/oprgen.py \
 	$(srcdir)/symresolve.ref \
 	$(srcdir)/installcheck.c \
 	$(srcdir)/libcheck.c
 
 if HAVE_YASM
-tests: difftest test-buf-overrun test-sym-resolver test-libcheck
+tests: difftest test-sym-resolver test-libcheck
 else
-tests: warn_no_yasm test-buf-overrun test-sym-resolver test-libcheck
+tests: warn_no_yasm test-sym-resolver test-libcheck
 endif
 
 SEED = 1984
 
 
-.PHONY: test-buf-overrun
-test-buf-overrun: bufoverrun
-	@./bufoverrun && echo "$@: passed"
-
-
 .PHONY: test-sym-resolver
 test-sym-resolver: symresolve
 	@$(top_builddir)/tests/$< > $@.out
@@ -63,7 +53,7 @@ oprtest_generate = \
 	outdir=$(builddir)/_results/asm/$(1) && \
 	mkdir -p $${outdir} && \
 	PYTHONPATH=$(top_srcdir)/scripts $(PYTHON) $(top_srcdir)/tests/oprgen.py \
-        $(top_srcdir)/docs/x86/optable.xml $(SEED) $(1) >$${outdir}/oprtest.asm
+	$(top_srcdir)/docs/x86/optable.xml $(SEED) $(1) >$${outdir}/oprtest.asm
 
 .PHONY: oprtest
 oprtest: oprgen.py
@@ -75,12 +65,12 @@ oprtest: oprgen.py
 
 .PHONY: difftest
 difftest: oprtest $(builddir)/difftest.sh
-	@sh $(builddir)/difftest.sh
+	@bash $(builddir)/difftest.sh
 
 
 .PHONY: difftest-refup
 difftest-refup: $(builddir)/difftest.sh
-	@sh $(builddir)/difftest.sh refup
+	@bash $(builddir)/difftest.sh refup
 
 
 .PHONY: warn_no_yasm
diff --git a/tests/asm/32/avx.asm b/tests/asm/32/avx.asm
new file mode 100644
index 0000000..c1e6a7f
--- /dev/null
+++ b/tests/asm/32/avx.asm
@@ -0,0 +1,18 @@
+[bits 32]
+    vaddsd xmm1, xmm2, xmm4
+    vaddsd xmm2, xmm3, [eax]
+    vaddps ymm1, ymm2, ymm3
+    vaddps ymm1, ymm7, [eax]
+    vblendpd ymm1, ymm7, ymm4, 0x42 
+    vcvtpd2ps xmm1, xmm2 
+    vcvtpd2ps xmm1, ymm3
+    vcvtpd2ps xmm1, oword [eax]
+    vcvtpd2ps xmm1, yword [eax]
+    vcvtpd2dq xmm1, xmm2 
+    vcvtpd2dq xmm1, ymm3
+    vcvtpd2dq xmm1, oword [eax]
+    vcvtpd2dq xmm1, yword [eax]
+    vcvttpd2dq xmm1, xmm2 
+    vcvttpd2dq xmm1, ymm3
+    vcvttpd2dq xmm1, oword [eax]
+    vcvttpd2dq xmm1, yword [eax]
diff --git a/tests/asm/32/avx.asm.Sref b/tests/asm/32/avx.asm.Sref
new file mode 100644
index 0000000..f4ff830
--- /dev/null
+++ b/tests/asm/32/avx.asm.Sref
@@ -0,0 +1,17 @@
+0000000000000000 c5eb58cc         vaddsd %xmm4, %xmm2, %xmm1
+0000000000000004 c5e35810         vaddsd (%eax), %xmm3, %xmm2
+0000000000000008 c5ec58cb         vaddps %ymm3, %ymm2, %ymm1
+000000000000000c c5c45808         vaddps (%eax), %ymm7, %ymm1
+0000000000000010 c4e3450dcc42     vblendpd $0x42, %ymm4, %ymm7, %ymm1
+0000000000000016 c5f95aca         vcvtpd2ps %xmm2, %xmm1  
+000000000000001a c5fd5acb         vcvtpd2ps %ymm3, %xmm1  
+000000000000001e c5f95a08         vcvtpd2ps (%eax), %xmm1 
+0000000000000022 c5fd5a08         vcvtpd2ps (%eax), %xmm1 
+0000000000000026 c5fbe6ca         vcvtpd2dq %xmm2, %xmm1  
+000000000000002a c5ffe6cb         vcvtpd2dq %ymm3, %xmm1  
+000000000000002e c5fbe608         vcvtpd2dq (%eax), %xmm1 
+0000000000000032 c5ffe608         vcvtpd2dq (%eax), %xmm1 
+0000000000000036 c5f9e6ca         vcvttpd2dq %xmm2, %xmm1 
+000000000000003a c5fde6cb         vcvttpd2dq %ymm3, %xmm1 
+000000000000003e c5f9e608         vcvttpd2dq (%eax), %xmm1
+0000000000000042 c5fde608         vcvttpd2dq (%eax), %xmm1
diff --git a/tests/asm/32/avx.asm.ref b/tests/asm/32/avx.asm.ref
new file mode 100644
index 0000000..2fff3c6
--- /dev/null
+++ b/tests/asm/32/avx.asm.ref
@@ -0,0 +1,17 @@
+0000000000000000 c5eb58cc         vaddsd xmm1, xmm2, xmm4 
+0000000000000004 c5e35810         vaddsd xmm2, xmm3, [eax]
+0000000000000008 c5ec58cb         vaddps ymm1, ymm2, ymm3 
+000000000000000c c5c45808         vaddps ymm1, ymm7, [eax]
+0000000000000010 c4e3450dcc42     vblendpd ymm1, ymm7, ymm4, 0x42
+0000000000000016 c5f95aca         vcvtpd2ps xmm1, xmm2    
+000000000000001a c5fd5acb         vcvtpd2ps xmm1, ymm3    
+000000000000001e c5f95a08         vcvtpd2ps xmm1, [eax]   
+0000000000000022 c5fd5a08         vcvtpd2ps xmm1, yword [eax]
+0000000000000026 c5fbe6ca         vcvtpd2dq xmm1, xmm2    
+000000000000002a c5ffe6cb         vcvtpd2dq xmm1, ymm3    
+000000000000002e c5fbe608         vcvtpd2dq xmm1, [eax]   
+0000000000000032 c5ffe608         vcvtpd2dq xmm1, yword [eax]
+0000000000000036 c5f9e6ca         vcvttpd2dq xmm1, xmm2   
+000000000000003a c5fde6cb         vcvttpd2dq xmm1, ymm3   
+000000000000003e c5f9e608         vcvttpd2dq xmm1, [eax]  
+0000000000000042 c5fde608         vcvttpd2dq xmm1, yword [eax]
diff --git a/tests/asm/32/test32.asm b/tests/asm/32/test32.asm
index 844b465..5b088b1 100644
--- a/tests/asm/32/test32.asm
+++ b/tests/asm/32/test32.asm
@@ -202,7 +202,7 @@
     psrlw mm0, 0x10
     fadd dword [eax]
     imul eax, [eax], 0xf6
-    movd [eax], xmm0
+    movd dword [eax], xmm0
     movzx eax, word [eax]
     push word [0x10]
     insw 
diff --git a/tests/asm/64/avx.asm b/tests/asm/64/avx.asm
new file mode 100644
index 0000000..3d661e4
--- /dev/null
+++ b/tests/asm/64/avx.asm
@@ -0,0 +1,5 @@
+[bits 64]
+    vaddsd xmm12, xmm4, xmm1
+    vminsd xmm13, xmm15, qword [rbx+r8-0x10]
+    vaddps ymm8, ymm3, ymm14
+    vaddps ymm8, ymm3, [rax]
diff --git a/tests/asm/64/avx.asm.ref b/tests/asm/64/avx.asm.ref
new file mode 100644
index 0000000..cc11b0d
--- /dev/null
+++ b/tests/asm/64/avx.asm.ref
@@ -0,0 +1,4 @@
+0000000000000000 c55b58e1         vaddsd xmm12, xmm4, xmm1
+0000000000000004 c421035d6c03f0   vminsd xmm13, xmm15, qword [rbx+r8-0x10]
+000000000000000b c4416458c6       vaddps ymm8, ymm3, ymm14
+0000000000000010 c5645800         vaddps ymm8, ymm3, [rax]
diff --git a/tests/asm/64/test64.asm b/tests/asm/64/test64.asm
index 9ee979f..127b700 100644
--- a/tests/asm/64/test64.asm
+++ b/tests/asm/64/test64.asm
@@ -92,7 +92,7 @@
     unpckhps xmm4, xmm5
     movhps xmm3, [eax]
     movhps [rax], xmm3
-    movss xmm0, [eax]
+    movss xmm0, dword [eax]
     movss [eax], xmm0
     movlpd [eax], xmm0
     movlpd xmm0, [eax]
@@ -106,9 +106,9 @@
     mov rax, dr1
     movnti [eax], eax
     movnti [rax], rax
-    movd [eax], xmm0
-    movd [eax], xmm0
-    movd xmm11, qword [eax]
+    movd dword [eax], xmm0
+    movd dword [eax], xmm0
+    movq xmm11, [eax]
     vmmcall 
     vmrun 
     clgi 
@@ -151,7 +151,7 @@
     fadd dword [rax+rbx]
     shl rsi, 1
     cvtsi2ss xmm1, qword [eax]
-    cvtss2si rax, [eax]
+    cvtss2si rax, dword [eax]
     cvttsd2si rax, [eax]
     call 0x64
     mpsadbw xmm7, xmm6, 0x7
diff --git a/tests/bufoverrun.c b/tests/bufoverrun.c
deleted file mode 100644
index de52262..0000000
--- a/tests/bufoverrun.c
+++ /dev/null
@@ -1,17 +0,0 @@
-#include <stdio.h>
-#include <udis86.h>
-
-int
-main() {
-    uint8_t raw[] = { 0xf0, 0x66, 0x36, 0x67, 0x65, 0x66, 0xf3, 0x67, 0xda };
-    uint8_t len = 9;
-    ud_t ud_obj;
-    ud_init(&ud_obj);
-    ud_set_mode(&ud_obj, 16);
-    ud_set_input_buffer(&ud_obj, raw, len);
-    ud_set_syntax(&ud_obj, UD_SYN_INTEL);
-    if (ud_disassemble(&ud_obj) != 0) {
-	return 0;
-    }
-    return 1;
-}
diff --git a/tests/libcheck.c b/tests/libcheck.c
index 66bea21..3cd0aab 100644
--- a/tests/libcheck.c
+++ b/tests/libcheck.c
@@ -163,6 +163,15 @@ check_input(ud_t *ud_obj)
     TEST_CHECK_INT(ud_disassemble(ud_obj), 0);
     TEST_CHECK(ud_input_end(ud_obj));
   }
+
+  /* a known buffer overrun test case (used to be bufoverrun.c) */
+  {
+    const uint8_t code[] = { 0xf0, 0x66, 0x36, 0x67, 0x65, 0x66,
+                             0xf3, 0x67, 0xda };
+    ud_set_mode(ud_obj, 16);
+    ud_set_input_buffer(ud_obj, code, sizeof code);
+    TEST_CHECK(ud_disassemble(ud_obj) > 0);
+  }
 }
   
 static void
diff --git a/tests/oprgen.py b/tests/oprgen.py
index 9ab7634..0c6b462 100644
--- a/tests/oprgen.py
+++ b/tests/oprgen.py
@@ -33,16 +33,17 @@
     scriptsPath = '../scripts'
 sys.path.append( scriptsPath );
 
-import ud_optable
 import ud_opcode
 
 def bits2name(bits):
     bits2name_map = {
-         8 : "byte",
-        16 : "word",
-        32 : "dword",
-        64 : "qword",
-        80 : "tword",
+         8  : "byte",
+        16  : "word",
+        32  : "dword",
+        64  : "qword",
+        80  : "tword",
+        128 : "oword",
+        256 : "yword",
     }
     return bits2name_map[bits]
 
@@ -53,10 +54,15 @@ class UdTestGenerator( ud_opcode.UdOpcodeTables ):
 
     ExcludeList = ( 'fcomp3', 'fcom2', 'fcomp5', 'fstp1', 'fstp8', 'fstp9',
                     'fxch4', 'fxch7', 'nop', 'xchg', 'movd',
-                    'pmulhrw' # yasm bug
+                    'pmulhrw', # yasm bug
+                    'vcvtpd2ps', # operand casting issues
+                    'vcvtpd2dq', # - ditto -
+                    'vcvttpd2dq', # - ditto -
+                    'vmovd', 'vmovq'
                     )
 
-    def __init__(self, mode):
+    def __init__(self, mode, xml):
+        super(UdTestGenerator, self).__init__(xml=xml)
         self.mode = mode
         pass
 
@@ -105,6 +111,10 @@ def Xmm(self):
         r = 16 if self.mode == 64 else 8
         return "xmm%d" % random.choice(range(r))
 
+    def Ymm(self):
+        r = 16 if self.mode == 64 else 8
+        return "ymm%d" % random.choice(range(r))
+
     def Mmx(self):
         return "mm%d" % random.choice(range(8))
 
@@ -363,8 +373,9 @@ def Opr_Gy(self):
     def Opr_M(self):
         return self.OprMem();
 
-    def Opr_U(self):
-        return self.Xmm();
+    def Opr_U(self, L=False):
+        return self.Xmm() if not L else self.Ymm()
+    Opr_Ux = Opr_U
 
     def Opr_N(self):
         return self.Mmx();
@@ -381,6 +392,9 @@ def Opr_Md(self, cast=False):
     def Opr_Mq(self, cast=False):
         return self.OprMem(size=64, cast=cast);
 
+    def Opr_Mdq(self, cast=False):
+        return self.OprMem(size=128, cast=cast);
+
     def Opr_Mt(self, cast=True):
         return self.OprMem(size=80, cast=cast);
 
@@ -418,10 +432,42 @@ def Insn_V_MwU(self, cast=False):
         return (self.Opr_V(), self.Opr_MwU(cast=True))
 
     def Insn_V_MdU(self, cast=False):
-        return (self.Opr_V(), self.Opr_MdU(cast=True))
+        return self.Opr_V(), self.Opr_MdU(cast=True)
 
     def Insn_V_MqU(self, cast=False):
-        return (self.Opr_V(), self.Opr_MqU(cast=True))
+        return self.Opr_V(), self.Opr_MqU(cast=True)
+
+    def Insn_Vx_MwU(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_MwU(cast=True)
+
+    def Insn_Vx_MdU(self, cast=False):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(), self.Opr_MdU(cast=True)
+
+    def Insn_Vx_MqU(self, cast=False):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(), self.Opr_MqU(cast=True)
+
+    def Insn_V_Md(self, cast=False):
+        return self.Opr_V(), self.Opr_Md(cast=True)
+
+    def Insn_V_Mq(self, cast=False):
+        return self.Opr_V(), self.Opr_Mq(cast=True)
+
+    def Insn_Mq_V(self):
+        x, y = self.Insn_V_Mq()
+        return y, x
+
+    def Insn_Md_V(self):
+        x, y = self.Insn_V_Md()
+        return y, x
+
+    def Insn_Vqq_Mq(self, cast=False):
+        return self.Opr_Vqq(), self.Opr_Mq(cast=True)
+
+    def Insn_Wdq_Vqq_Ib(self, cast=False):
+        return self.Opr_W(size=128, cast=True), self.Opr_Vqq(), self.Opr_Ib()
 
     def Insn_MbRv(self):
         return [self.Opr_MbRv(cast=True)]
@@ -436,7 +482,8 @@ def Insn_MwRv(self):
         return [self.Opr_MwRv(cast=True)]
 
     def Insn_MwRd_V_Ib(self):
-        return [self.Opr_MwRd(cast=False), self.Opr_V(), self.Opr_Ib()]
+        return [self.Opr_MwRd(cast=True), self.Opr_V(), self.Opr_Ib()]
+    Insn_MwRd_Vx_Ib = Insn_MwRd_V_Ib
 
     def Insn_S_MwRv(self):
         if self.mode == 64:
@@ -488,8 +535,12 @@ def Insn_V_Mo(self):
     def Insn_V_Md_Ib(self):
         return self.Opr_V(), self.Opr_Md(cast=True), self.Opr_Ib()
 
+    def Insn_V_Ed(self):
+        return self.Opr_V(), self.Opr_Ed(cast=True)
+
     def Insn_V_Ed_Ib(self):
-        return self.Opr_V(), self.Opr_Ed(cast=True), self.Opr_Ib()
+        x, y = self.Insn_V_Ed()
+        return x, y, self.Opr_Ib()
 
     def Insn_P_Ew_Ib(self):
         return self.Opr_P(), self.Opr_Ew(cast=True), self.Opr_Ib()
@@ -527,11 +578,182 @@ def Insn_Ev(self):
             choices.append(self.Modrm_RM_GPR(64, cast=True))
         return [random.choice(choices)]
 
-    def Opr_V(self):
-        return self.Xmm()
+    def Opr_V(self, L=False):
+        return self.Xmm() if not L else self.Ymm()
+    Opr_Vdq = Xmm
+    Opr_Vqq = Ymm
+    Opr_Hqq = Ymm
+
+    def Opr_Vsd(self, L=False):
+        return self.Xmm() if not L else self.Ymm()
+
+    def Opr_L(self, L=False):
+        return self.Xmm() if not L else self.Ymm()
+
+    def Opr_H(self, L=False):
+        return self.Opr_V(L)
+
+    def Opr_W(self, L=False, cast=False, size=None):
+        if not L:
+            if size is None: size = 128
+            return random.choice([self.Xmm(), self.OprMem(size=size, cast=cast)])
+        else:
+            if size is None: size = 256
+            return random.choice([self.Ymm(), self.OprMem(size=size, cast=cast)])
+    Opr_Wx = Opr_W
+
+    def Opr_Wdq(self, cast=False):
+        return self.Opr_W(cast=cast, size=128)
+
+    def Opr_Wsd(self, L=False):
+        return random.choice([self.Xmm(), self.OprMem(size=64, cast=False)])
+
+    def Opr_Wdq(self, cast=False):
+        return random.choice([self.Xmm(), self.OprMem(size=128, cast=cast)])
+
+    def Opr_Wqq(self, L=False):
+        return random.choice([self.Ymm(), self.OprMem(size=256, cast=False)])
+
+    def Insn_V_H_W(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_H(L), self.Opr_W(L)]
+
+    def Insn_Vx_Wx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_W(L, cast=False)]
+
+    def Insn_Wx_Vx(self):
+        x, y = self.Insn_Vx_Wx()
+        return y, x
+
+    def Insn_Vx_U(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_U(L)
+
+    def Insn_Eq_Vx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_Eq(), self.Opr_V(L)
+
+    def Insn_Ey_Vx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_Ey(cast=True), self.Opr_V(L)
+
+    def Insn_Vx_Ey(self):
+        x, y = self.Insn_Ey_Vx()
+        return y, x
+
+    def Insn_Vdq_Wx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_Vdq(), self.Opr_W(L, cast=True)]
+
+    def Insn_Vdq_W(self):
+        return [self.Opr_V(), self.Opr_W(cast=False)]
+
+    def Insn_V_Wdq(self):
+        return [self.Opr_V(), self.Opr_W(cast=False)]
+
+    def Insn_Vx_Ux(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_U(L)
+
+    def Insn_Vx_Wdq(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_W(L=False, cast=L)]
+
+    def Insn_Vx_Wx_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_W(L), self.Opr_Ib()]
+
+    def Insn_Vx_Hx_Wx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_H(L), self.Opr_W(L)]
+
+    def Insn_Hx_Vx_Wx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_H(L), self.Opr_V(L), self.Opr_W(L)]
+
+    def Insn_Vx_Hx_Ux(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_H(L), self.Opr_U(L)]
 
-    def Opr_W(self):
-        return random.choice([self.Xmm(), self.OprMem(size=128)])
+    def Insn_Hx_Ux_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_H(L), self.Opr_U(L), self.Opr_Ib()]
+
+    def Insn_Vx_Hx_Ey(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_H(L), self.Opr_Ey(cast=True)
+
+    def Insn_Vx_Hx_Ed_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_H(L), self.Opr_Ed(cast=True), self.Opr_Ib()
+    Insn_V_H_Ed_Ib = Insn_Vx_Hx_Ed_Ib
+
+    def Insn_V_H_Eq_Ib(self):
+        return self.Opr_V(), self.Opr_H(), self.Opr_Eq(cast=True), self.Opr_Ib()
+
+    def Insn_V_H_MbRd_Ib(self):
+        return self.Opr_V(), self.Opr_H(), self.Opr_MbRd(cast=True), self.Opr_Ib()
+
+    def Insn_Vx_Hx_Wx_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_H(L), self.Opr_W(L), self.Opr_Ib()]
+
+    def Insn_Vx_Hx_M(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_H(L), self.Opr_M()
+
+    def Insn_Vx_Hx_Md_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_H(L), self.Opr_Md(cast=True), self.Opr_Ib()]
+
+    def Insn_Vqq_Hqq_Wdq_Ib(self):
+        return [self.Opr_Vqq(), self.Opr_Hqq(), self.Opr_Wdq(cast=True), self.Opr_Ib()]
+
+    def Insn_Vx_Hx_Wx_Lx(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return [self.Opr_V(L), self.Opr_H(L), self.Opr_W(L), self.Opr_L(L)]
+
+    def Insn_Vx_Hx_MqU(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_H(L), self.Opr_MqU(cast=True)
+
+    def Insn_Vx_Hx_MdU(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_H(L), self.Opr_MdU(cast=True)
+
+    def Insn_Vx_M(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_V(L), self.Opr_M()
+
+    def Insn_M_Vx(self):
+        x, y = self.Insn_Vx_M()
+        return y, x
+
+    def Insn_MdRy_Vx_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_MdRy(cast=True), self.Opr_V(L), self.Opr_Ib()
+
+    def Insn_MdRy_V_Ib(self):
+        return self.Opr_MdRy(cast=True), self.Opr_V(), self.Opr_Ib()
+
+    def Insn_MdRv_Vx_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_MdRv(cast=True), self.Opr_V(L), self.Opr_Ib()
+
+    def Insn_MdRv_V_Ib(self):
+        return self.Opr_MdRv(cast=True), self.Opr_V(), self.Opr_Ib()
+
+    def Insn_MwRv_Vx_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_MwRv(cast=True), self.Opr_V(L), self.Opr_Ib()
+
+    def Insn_MwRv_V_Ib(self):
+        return self.Opr_MwRv(cast=True), self.Opr_V(), self.Opr_Ib()
+
+    def Insn_Ed_Vx_Ib(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Opr_Ed(cast=True), self.Opr_V(L), self.Opr_Ib()
 
     def Opr_P(self):
         return self.Mmx()
@@ -623,6 +845,39 @@ def Insn_Gy_Eb(self):
     def Insn_Gy_Ew(self):
         return self.Opr_Gy(), self.Opr_Ew(cast=True)
 
+    def Insn_Gy_W(self):
+        choices = [(self.Gpr(32), self.Opr_W(size=32, cast=False)),]
+        if self.mode == 64:
+            choices.append([self.Gpr(64), self.Opr_W(size=32, cast=True)])
+        return random.choice(choices)
+
+    def Insn_Gy_MqU(self):
+        choices = [(self.Gpr(32), self.Opr_W(size=64, cast=True)),]
+        if self.mode == 64:
+            choices.append([self.Gpr(64), self.Opr_W(size=64, cast=False)])
+        return random.choice(choices)
+
+    def Insn_Gy_MdU(self):
+        choices = [(self.Gpr(32), self.Opr_W(size=32, cast=False)),]
+        if self.mode == 64:
+            choices.append([self.Gpr(64), self.Opr_W(size=32, cast=True)])
+        return random.choice(choices)
+
+    def Insn_Gd_Ux(self):
+        L = random.choice((True, False)) if self.vexl else False
+        return self.Gpr(32), self.Opr_U(L)
+
+    def Insn_Gy_Ux(self):
+        L = random.choice((True, False)) if self.vexl else False
+        choices = [(self.Gpr(32), self.Opr_U(L)),]
+        if self.mode == 64:
+            choices.append([self.Gpr(64), self.Opr_U(L)])
+        return random.choice(choices)
+
+    def Insn_Gy_Ux_Ib(self):
+        x, y = self.Insn_Gy_Ux()
+        return x, y, self.Opr_Ib()
+
     def Insn_Ev_Iz(self):
         choices = [(self.Opr_Ew(cast=True), self.Opr_Iw()),
                    (self.Opr_Ed(cast=True), self.Opr_Id())]
@@ -675,10 +930,10 @@ def Insn_Ev_Gv_Ib(self):
     Insn_Ev_Gv_sIb = Insn_Ev_Gv_Ib
 
     def Insn_Ev_V_Ib(self):
-        return (self.Opr_Ev(cast=True), self.Opr_V(), self.Opr_Ib(cast=False))
+        return self.Opr_Ev(cast=True), self.Opr_V(), self.Opr_Ib(cast=False)
 
     def Insn_Ed_V_Ib(self):
-        return (self.Opr_Ed(cast=False), self.Opr_V(), self.Opr_Ib(cast=False))
+        return self.Opr_Ed(cast=True), self.Opr_V(), self.Opr_Ib(cast=False)
 
     def Insn_Ew_V_Ib(self):
         return (self.Opr_Ew(cast=True), self.Opr_V(), self.Opr_Ib(cast=False))
@@ -686,33 +941,30 @@ def Insn_Ew_V_Ib(self):
     def generate_yasm( self, mode, seed ):
         opr_combos = {}
         random.seed( seed )
-        print "[bits %s]" % mode
-        for insn in self.InsnTable:
-            if insn[ 'mnemonic' ] in self.ExcludeList:
+        print("[bits %s]" % mode)
+        for insn in self.getInsnList():
+            if insn.mnemonic in self.ExcludeList:
                 continue
-            if insn[ 'vendor' ] == 'intel':
+            if insn.vendor == 'intel':
                 continue
-            if '/m' in insn['opcext']:
-                mode = insn['opcext']['/m']
-                if ( (mode == '00' and self.mode == 64) or
-                     (mode == '01' and self.mode != 64) ):
-                    continue
-            if '/o' in insn['opcext']:
-                osize = insn['opcext']['/o']
-                if (osize == '02' and self.mode != 64):
-                    continue
-            if 'def64' in insn[ 'prefixes' ] and mode != '64':
+            if ((insn.mode == '!64' and self.mode == 64) or
+                (insn.mode == '64'  and self.mode != 64)):
                 continue
-
-            if len(insn['operands']) == 0:
+            if insn.osize == '64' and self.mode != 64:
                 continue
-                # print "\t%s" % insn['mnemonic']
-
-            if ( "Jb" in insn['operands'] or
-                 "Jz" in insn['operands'] ):
+            if insn.isDef64():
+                continue
+            if len(insn.operands) == 0:
+                continue
+            if "Jb" in insn.operands or "Jz" in insn.operands:
                 continue
 
-            fusedName = '_'.join(insn['operands'])
+            if insn.lookupPrefix("vexl"):
+                self.vexl = True
+            else:
+                self.vexl = False
+
+            fusedName = '_'.join(insn.operands)
             if fusedName not in opr_combos:
                 opr_combos[fusedName] = { 'covered' : False, 'freq' : 0 }
             opr_combos[fusedName]['freq'] += 1
@@ -722,13 +974,13 @@ def generate_yasm( self, mode, seed ):
                 operands = ", ".join(fn())
             else: 
                 oprgens = [ getattr(self, "Opr_" + opr, None) 
-                                for opr in insn['operands'] ]
+                                for opr in insn.operands ]
                 if None not in oprgens:
                     operands = ", ".join([ oprgen() for oprgen in oprgens ])
                 else:
                     operands = None
             if operands is not None:
-                print "\t%s %s" % (insn['mnemonic'], operands)
+                print("\t%s %s" % (insn.mnemonic, operands))
                 opr_combos[fusedName]['covered'] = True
 
         # stats
@@ -745,10 +997,7 @@ def generate_yasm( self, mode, seed ):
                         (self.mode, covered, total, (100 * covered / total)))
 
 def main():
-    generator = UdTestGenerator(int(sys.argv[3]))
-    optableXmlParser = ud_optable.UdOptableXmlParser()
-    optableXmlParser.parse( sys.argv[ 1 ], generator.addInsnDef )
-
+    generator = UdTestGenerator(mode=int(sys.argv[3]), xml=sys.argv[1])
     generator.generate_yasm( sys.argv[ 3 ], int( sys.argv[ 2 ] ) )
 
 if __name__ == '__main__':