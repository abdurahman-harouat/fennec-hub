pkgname: rustc
pkgver: "1.81.0"
dependencies:
  - cmake
  - curl
  - libssh2
  - llvm
  - sqlite
source:
  url: https://static.rust-lang.org/dist/rustc-1.81.0-src.tar.xz
  md5: 4f202568150660f369de3afbfb410970

build:
  - |
    cat << EOF > config.toml
    # see config.toml.example for more possible options
    # See the 8.4 book for an old example using shipped LLVM
    # e.g. if not installing clang, or using a version before 13.0

    # Tell x.py the editors have reviewed the content of this file
    # and updated it to follow the major changes of the building system,
    # so x.py will not warn us to do such a review.
    change-id = 127866

    [llvm]
    # by default, rust will build for a myriad of architectures
    targets = "$(uname -m | sed 's/aarch64/AArch64/g; s/x86_64/X86/g')"

    # When using system llvm prefer shared libraries
    link-shared = true

    [build]
    # omit docs to save time and space (default is to build them)
    docs = false

    # install extended tools: cargo, clippy, etc
    extended = true

    # Do not query new versions of dependencies online.
    locked-deps = true

    # Specify which extended tools (those from the default install).
    tools = ["cargo", "clippy", "rustdoc", "rustfmt"]

    # Use the source code shipped in the tarball for the dependencies.
    # The combination of this and the "locked-deps" entry avoids downloading
    # many crates from Internet, and makes the Rustc build more stable.
    vendor = true

    [install]
    prefix = "/opt/rustc-1.81.0"
    docdir = "share/doc/rustc-1.81.0"

    [rust]
    channel = "stable"
    description = "for BLFS r12.2-124"

    # Enable the same optimizations as the official upstream build.
    lto = "thin"
    codegen-units = 1

    [target.$(uname -m | sed 's/aarch64/aarch64-unknown-linux-gnu/g; s/x86_64/x86_64-unknown-linux-gnu/g')]
    # NB the output of llvm-config (i.e. help options) may be
    # dumped to the screen when config.toml is parsed.
    llvm-config = "/usr/bin/llvm-config"

    EOF

  - |
    sed '/MirOpt/d' -i src/bootstrap/src/core/builder.rs &&

    sed 's/!path.ends_with("cargo")/true/' \
        -i src/bootstrap/src/core/build_steps/tool.rs &&

    sed 's/^.*build_wasm.*$/#[allow(unreachable_code)]&return false;/' \
        -i src/bootstrap/src/lib.rs

  - |
    [ ! -e /usr/include/libssh2.h ] || export LIBSSH2_SYS_USE_PKG_CONFIG=1
    [ ! -e /usr/include/sqlite3.h ] || export LIBSQLITE3_SYS_USE_PKG_CONFIG=1
    python3 x.py build

install:
  - |
    mkdir -pv /opt/rustc-1.81.0 &&
    ln -svfn rustc-1.81.0 /opt/rustc
  - |
    python3 x.py install rustc std &&
    python3 x.py install --stage=1 cargo clippy rustfmt
  - |
    rm -fv /opt/rustc-1.81.0/share/doc/rustc-1.81.0/*.old   &&
    install -vm644 README.md                                \
                  /opt/rustc-1.81.0/share/doc/rustc-1.81.0 &&

    install -vdm755 /usr/share/zsh/site-functions      &&
    ln -sfv /opt/rustc/share/zsh/site-functions/_cargo \
            /usr/share/zsh/site-functions
  - |
    unset LIB{SSH2,SQLITE3}_SYS_USE_PKG_CONFIG
  - |
    cat > /etc/profile.d/rustc.sh << "EOF"
    # Begin /etc/profile.d/rustc.sh

    pathprepend /opt/rustc/bin           PATH

    # End /etc/profile.d/rustc.sh
    EOF

additional_commands:
  - |
    source /etc/profile.d/rustc.sh
