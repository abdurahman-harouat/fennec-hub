pkgname="llvm"
pkgver="18.1.7"
source="https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.7/${pkgname}-${pkgver}.src.tar.xz"
md5sum="ad39785449a878df1eed590339c3a8c4"

prepare() {
    downloaded_file=$(basename "${source}")
    tar -xf ${downloaded_file}
    cd ${pkgname}-${pkgver}.src
}

build() {
    # Define hashes
    declare -A md5_hashes=(
        ["llvm-cmake-18.src.tar.xz"]="bf2ad617d47ce40fe77c0e5c26b1fe43"
        ["llvm-third-party-18.src.tar.xz"]="5ebac19868c66cdac8b87077faefd38c"
        ["clang-18.1.7.src.tar.xz"]="47e26237223d5ee0e6b674f028b56dae"
        ["compiler-rt-18.1.7.src.tar.xz"]="31753c0ec6271a37c12a17cf84187098"
    )

    # Download and verify files
    for file in "llvm-cmake-18.src.tar.xz" "llvm-third-party-18.src.tar.xz" "clang-18.1.7.src.tar.xz" "compiler-rt-18.1.7.src.tar.xz"; do
        case $file in
            "llvm-cmake-18.src.tar.xz"|"llvm-third-party-18.src.tar.xz")
                wget "https://anduin.linuxfromscratch.org/BLFS/llvm/$file"
                ;;
            *)
                wget "https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.7/$file"
                ;;
        esac

        # Verify hash
        calculated_hash=$(md5sum "$file" | awk '{print $1}')
        if [[ "$calculated_hash" != "${md5_hashes[$file]}" ]]; then
            echo "Suspicious file -> $file"
            return 1
        fi
    done

    # Extract files
    tar -xf llvm-cmake-18.src.tar.xz
    tar -xf llvm-third-party-18.src.tar.xz
    tar -xf clang-18.1.7.src.tar.xz
    tar -xf compiler-rt-18.1.7.src.tar.xz

    # Adjust CMakeLists.txt and HandleLLVMOptions.cmake
    sed '/LLVM_COMMON_CMAKE_UTILS/s@../cmake@llvm-cmake-18.src@' -i CMakeLists.txt
    sed '/LLVM_THIRD_PARTY_DIR/s@../third-party@llvm-third-party-18.src@' -i cmake/modules/HandleLLVMOptions.cmake

    # Move Clang and Compiler-RT to the correct locations
    mv clang-18.1.7.src tools/clang
    mv compiler-rt-18.1.7.src projects/compiler-rt

    # Update Python shebangs
    grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

    # Update CMakeLists.txt in FileCheck
    sed 's/utility/tool/' -i utils/FileCheck/CMakeLists.txt

    # Create build directory and change to it
    mkdir -v build && cd build

    # Configure with CMake
    CC=gcc CXX=g++ \
    cmake -D CMAKE_INSTALL_PREFIX=/usr \
        -D CMAKE_SKIP_INSTALL_RPATH=ON \
        -D LLVM_ENABLE_FFI=ON \
        -D CMAKE_BUILD_TYPE=Release \
        -D LLVM_BUILD_LLVM_DYLIB=ON \
        -D LLVM_LINK_LLVM_DYLIB=ON \
        -D LLVM_ENABLE_RTTI=ON \
        -D LLVM_TARGETS_TO_BUILD="host;AMDGPU" \
        -D LLVM_BINUTILS_INCDIR=/usr/include \
        -D LLVM_INCLUDE_BENCHMARKS=OFF \
        -D CLANG_DEFAULT_PIE_ON_LINUX=ON \
        -D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang \
        -W no-dev -G Ninja ..

    # Build
    ninja -j$(nproc)  # This uses all available cores

    # ... commented to avoid test
    # Remove a problematic test file
    # rm -f ../projects/compiler-rt/test/tsan/getline_nohang.cpp

    # Run tests (this may fail if dbus is not running or if you don't have necessary permissions)
    # if systemctl --user is-active dbus &> /dev/null; then
    #     systemd-run --user --pty -d -G -p LimitCORE=0 ninja check-all
    # else
    #     echo "Warning: dbus is not running. Skipping tests."
    # fi
}

install() {
    ninja install

    mkdir -pv /etc/clang &&
    for i in clang clang++; do
        echo -fstack-protector-strong > /etc/clang/$i.cfg
    done
}


clean() {
    cd ../..
    downloaded_file=$(basename "${source}")
    rm -Rf ${pkgname}-${pkgver}
    rm ${downloaded_file}
    rm llvm-cmake-18.src.tar.xz
    rm llvm-third-party-18.src.tar.xz
    rm clang-18.1.7.src.tar.xz
    rm compiler-rt-18.1.7.src.tar.xz
    rm -Rf llvm-cmake-18.src
    rm -Rf llvm-third-party-18.src
    rm -Rf clang-18.1.7.src
    rm -Rf compiler-rt-18.1.7.src
}